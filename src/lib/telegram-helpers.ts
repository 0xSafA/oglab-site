/**
 * Telegram Helper Functions
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 */

export type TelegramNotificationType = 'order' | 'wish' | 'feedback' | 'staff_question' | 'general';

export interface TelegramNotification {
  type: TelegramNotificationType;
  message: string;
  userId?: string;
  userContext?: {
    totalVisits?: number;
    totalMessages?: number;
    favoriteStrains?: string[];
    preferredEffects?: string[];
    language?: string;
  };
  products?: string[];
  metadata?: Record<string, unknown>;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ API endpoint
 */
export async function sendTelegramNotification(
  notification: TelegramNotification
): Promise<{ success: boolean; messageId?: number; error?: string }> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN not configured, skipping notification');
      return { success: false, error: 'Telegram not configured' };
    }

    const response = await fetch('/api/telegram/notify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(notification),
    });

    const data = await response.json();

    if (!response.ok) {
      console.error('‚ùå TELEGRAM: Failed to send notification', data);
      return { success: false, error: data.error || 'Unknown error' };
    }

    console.log(`‚úÖ TELEGRAM: Notification sent (${notification.type}), message_id: ${data.messageId}`);
    return { success: true, messageId: data.messageId };

  } catch (error) {
    console.error('‚ùå TELEGRAM: Error sending notification', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatUserContextForTelegram(userContext?: {
  totalVisits?: number;
  totalMessages?: number;
  favoriteStrains?: string[];
  preferredEffects?: string[];
  language?: string;
}): string {
  if (!userContext) return '';

  const parts: string[] = [];

  if (userContext.totalVisits) {
    parts.push(`–í–∏–∑–∏—Ç–æ–≤: ${userContext.totalVisits}`);
  }

  if (userContext.language) {
    const langNames: Record<string, string> = {
      ru: '–†—É—Å—Å–∫–∏–π',
      en: 'English',
      th: '‡πÑ‡∏ó‡∏¢',
      de: 'Deutsch',
      fr: 'Fran√ßais',
      he: '◊¢◊ë◊®◊ô◊™',
      it: 'Italiano',
    };
    parts.push(`–Ø–∑—ã–∫: ${langNames[userContext.language] || userContext.language}`);
  }

  if (userContext.preferredEffects && userContext.preferredEffects.length > 0) {
    parts.push(`–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${userContext.preferredEffects.join(', ')}`);
  }

  if (userContext.favoriteStrains && userContext.favoriteStrains.length > 0) {
    parts.push(`–ò–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏: ${userContext.favoriteStrains.slice(0, 3).join(', ')}`);
  }

  return parts.join(' | ');
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç emoji –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export function getNotificationEmoji(type: TelegramNotificationType): string {
  const emojis: Record<TelegramNotificationType, string> = {
    order: 'üõí',
    wish: 'üí≠',
    feedback: '‚≠ê',
    staff_question: '‚ùì',
    general: 'üí¨',
  };
  return emojis[type];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 */
export function getNotificationTitle(type: TelegramNotificationType): string {
  const titles: Record<TelegramNotificationType, string> = {
    order: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
    wish: '–ü–æ–∂–µ–ª–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
    feedback: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
    staff_question: '–í–æ–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—É',
    general: '–°–æ–æ–±—â–µ–Ω–∏–µ',
  };
  return titles[type];
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
 */
export function validateTelegramConfig(): {
  isValid: boolean;
  errors: string[];
} {
  const errors: string[] = [];

  if (!process.env.TELEGRAM_BOT_TOKEN) {
    errors.push('TELEGRAM_BOT_TOKEN is not set');
  }

  if (!process.env.TELEGRAM_CHAT_ID) {
    errors.push('TELEGRAM_CHAT_ID is not set');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 123456:ABC-DEF...)
  if (process.env.TELEGRAM_BOT_TOKEN) {
    const tokenFormat = /^\d+:[A-Za-z0-9_-]+$/;
    if (!tokenFormat.test(process.env.TELEGRAM_BOT_TOKEN)) {
      errors.push('TELEGRAM_BOT_TOKEN has invalid format');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç chat_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –¥–ª—è –≥—Ä—É–ø–ø)
  if (process.env.TELEGRAM_CHAT_ID) {
    const chatIdFormat = /^-?\d+$/;
    if (!chatIdFormat.test(process.env.TELEGRAM_CHAT_ID)) {
      errors.push('TELEGRAM_CHAT_ID has invalid format (should be a number)');
    }
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram HTML
 */
export function escapeHtmlForTelegram(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown
 */
export function escapeMarkdownForTelegram(text: string): string {
  // MarkdownV2 —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
  let escaped = text;
  specialChars.forEach(char => {
    escaped = escaped.replace(new RegExp(`\\${char}`, 'g'), `\\${char}`);
  });
  return escaped;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞
 */
export async function checkTelegramBotStatus(): Promise<{
  status: 'ok' | 'error';
  bot?: {
    id: number;
    username: string;
    name: string;
  };
  chats?: {
    main: string;
    orders: string;
    feedback: string;
  };
  error?: string;
}> {
  try {
    const response = await fetch('/api/telegram/notify', {
      method: 'GET',
    });

    return response.json();
  } catch (error) {
    return {
      status: 'error',
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
 */
export function createNotificationSummary(message: string, maxLength: number = 200): string {
  if (message.length <= maxLength) {
    return message;
  }
  return message.substring(0, maxLength - 3) + '...';
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞)
 */
export function groupNotifications(
  notifications: TelegramNotification[]
): TelegramNotification {
  if (notifications.length === 0) {
    throw new Error('Cannot group empty notifications array');
  }

  if (notifications.length === 1) {
    return notifications[0];
  }

  const firstType = notifications[0].type;
  const allProducts = notifications
    .flatMap(n => n.products || [])
    .filter((p, i, arr) => arr.indexOf(p) === i); // unique

  const messages = notifications.map(n => n.message).join('\n\n---\n\n');

  return {
    type: firstType,
    message: `üì¶ –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ ${notifications.length} —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n${messages}`,
    products: allProducts,
    metadata: {
      grouped: true,
      count: notifications.length,
    },
  };
}
