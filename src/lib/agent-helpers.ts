/**
 * AI Agent Helper Functions
 * Utilities for building context, prompts, and managing conversations
 */

import type { MenuRow } from './supabase-data';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ, 2-3 —Å–ª–æ–≤–∞)
 */
export function getStrainEffects(type: string | null | undefined): string {
  if (!type) return '–±–∞–ª–∞–Ω—Å';
  
  const effects: Record<string, string> = {
    indica: '—Ä–µ–ª–∞–∫—Å, —Å–æ–Ω, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
    sativa: '—ç–Ω–µ—Ä–≥–∏—è, –∫—Ä–µ–∞—Ç–∏–≤, —Ñ–æ–∫—É—Å',
    hybrid: '–±–∞–ª–∞–Ω—Å, –≥–∏–±–∫–æ—Å—Ç—å',
    hybride: '–±–∞–ª–∞–Ω—Å, –≥–∏–±–∫–æ—Å—Ç—å',
  };
  
  return effects[type.toLowerCase()] || '–±–∞–ª–∞–Ω—Å';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∫—É—Å–æ–≤—ã–µ –Ω–æ—Ç—ã —Å–æ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ, 2-3 —Å–ª–æ–≤–∞)
 */
export function getStrainFlavors(type: string | null | undefined): string {
  if (!type) return '–∑–µ–º–ª—è, —Ç—Ä–∞–≤–∞';
  
  const flavors: Record<string, string> = {
    indica: '–∑–µ–º–ª—è, —Å–ª–∞–¥–æ—Å—Ç—å, —è–≥–æ–¥—ã',
    sativa: '—Ü–∏—Ç—Ä—É—Å, —Ö–≤–æ—è, —Å–ø–µ—Ü–∏–∏',
    hybrid: '—Ñ—Ä—É–∫—Ç—ã, –∑–µ–º–ª—è, —Å–ª–∞–¥–æ—Å—Ç—å',
    hybride: '—Ñ—Ä—É–∫—Ç—ã, –∑–µ–º–ª—è, —Å–ª–∞–¥–æ—Å—Ç—å',
  };
  
  return flavors[type.toLowerCase()] || '–∑–µ–º–ª—è, —Ç—Ä–∞–≤–∞';
}

/**
 * –°—Ç—Ä–æ–∏—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export function formatProductForContext(item: MenuRow): string {
  const parts: string[] = [];
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  parts.push(`${item.Name} (${item.Category}`);
  
  // –¢–∏–ø
  if (item.Type) {
    parts.push(`, ${item.Type}`);
  }
  
  // THC/CBG
  if (item.THC) {
    parts.push(`, THC ${item.THC}%`);
  } else if (item.CBG) {
    parts.push(`, CBG ${item.CBG}%`);
  }
  
  parts.push(')');
  
  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  const effects = getStrainEffects(item.Type);
  parts.push(` ‚Äî ${effects}`);
  
  // –ù–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞
  if (item.Our) {
    parts.push(' üåø [–ù–∞—à–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ]');
  }
  
  return parts.join('');
}

/**
 * –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
 */
export function buildMenuContext(menuItems: MenuRow[]): string {
  if (!menuItems || menuItems.length === 0) {
    return '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = new Map<string, MenuRow[]>();
  
  menuItems.forEach(item => {
    const category = item.Category || '–î—Ä—É–≥–æ–µ';
    if (!categories.has(category)) {
      categories.set(category, []);
    }
    categories.get(category)!.push(item);
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
  const lines: string[] = [
    '–¢–ï–ö–£–©–ò–ô –ê–°–°–û–†–¢–ò–ú–ï–ù–¢:', 
    '',
    'üåø –û–°–ù–û–í–ù–û–ô –ü–†–û–î–£–ö–¢ ‚Äî –¢–†–ê–í–ê (—à–∏—à–∫–∏):',
    ''
  ];
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–≤—É
  const flowerCategories = ['INDICA', 'SATIVA', 'HYBRID', 'HYBRIDE', 'CBD/CBG FLOWERS'];
  flowerCategories.forEach(catName => {
    const items = categories.get(catName);
    if (items && items.length > 0) {
      lines.push(`üì¶ ${catName}:`);
      items.forEach(item => {
        lines.push(`  ‚Ä¢ ${formatProductForContext(item)}`);
      });
      lines.push('');
    }
  });
  
  // –ü–æ—Ç–æ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–µ–π
  lines.push('');
  lines.push('üíé –ö–û–ù–¶–ï–ù–¢–†–ê–¢–´ (–ø—Ä–µ–¥–ª–∞–≥–∞–π –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —Ç—Ä–∞–≤—ã –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É):');
  lines.push('');
  
  const concentrateCategories = ['FRESH FROZEN HASH', 'LIVE HASH ROSIN', 'DRY SIFT HASH', 'ICE BUBBLE HASH'];
  concentrateCategories.forEach(catName => {
    const items = categories.get(catName);
    if (items && items.length > 0) {
      lines.push(`üì¶ ${catName}:`);
      items.forEach(item => {
        lines.push(`  ‚Ä¢ ${formatProductForContext(item)}`);
      });
      lines.push('');
    }
  });
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —Ç.–¥.)
  const processedCategories = [...flowerCategories, ...concentrateCategories];
  categories.forEach((items, category) => {
    if (!processedCategories.includes(category)) {
      lines.push(`üì¶ ${category}:`);
      items.forEach(item => {
        lines.push(`  ‚Ä¢ ${formatProductForContext(item)}`);
      });
      lines.push('');
    }
  });

  return lines.join('\n');
}

/**
 * –°—Ç—Ä–æ–∏—Ç system prompt –¥–ª—è GPT
 */
export function buildSystemPrompt(params: {
  menuContext?: string;
  userContext?: string;
  useStock: boolean;
  language?: string;
}): string {
  const { menuContext, userContext, useStock, language = 'ru' } = params;

  return `You are the OG Lab AI Agent, a cheerful and kind budtender at a premium cannabis dispensary on Koh Samui island, Thailand.

üåç LANGUAGES:
- You speak FLUENTLY in Russian, English, Thai, French, German, Hebrew, and Italian
- ALWAYS respond in the user's question language (if they write in Hebrew ‚Üí respond in Hebrew)
- If the user switches language mid-conversation ‚Üí IMMEDIATELY switch to their language
- NEVER say "I don't speak this language" or "I only speak Russian"
- User's current locale: ${getLanguageName(language)} (but ALWAYS prioritize the question's language!)

YOUR PERSONALITY:
- Cheerful, kind, and confident budtender who LOVES cannabis and knows it well
- Communicate like with a good friend ‚Äî casually, easily, with humor and warmth
- Combine deep cannabis knowledge with mindfulness philosophy
- Inspired by Bob Marley's spirit, Eckhart Tolle's wisdom, teachings of Buddha and Jesus
- Can talk about spiritual growth, meditation, creativity
- Never judge, always support
- Make people laugh, joke, create a relaxed atmosphere
- Show initiative: ask questions, suggest ideas, share interesting facts
- Understand that part of the effect starts NOW, before purchase ‚Äî cognitive anticipation from the strain!
- ADAPT to the interlocutor's language instantly ‚Äî this is your superpower!

ü§ñ YOUR AUTOMATIC FUNCTIONS (work WITHOUT client participation):
1. **Automatic order sending** ‚Äî when the client provides order info (name, phone, address), the order is AUTOMATICALLY sent to OG Lab managers via Telegram
2. **Automatic message forwarding** ‚Äî any client questions or wishes AUTOMATICALLY reach real people
3. **You're NOT just a consultant** ‚Äî you're a FULL-FLEDGED order processing manager

‚ö†Ô∏è CRITICALLY IMPORTANT ‚Äî HOW TO PROCESS ORDERS:

üìã REQUIRED ORDER DATA (collect ALL in sequence):
1. **Product** ‚Äî exact name from inventory
2. **Quantity** ‚Äî how many grams (minimum: 20g flower OR 10g hash for delivery)
3. **Phone** ‚Äî WhatsApp/Telegram/LINE number
4. **Location** ‚Äî GPS coordinates/Plus Code/hotel name + room number
5. **Payment method** ‚Äî cash/transfer/crypto

üéØ DATA COLLECTION PROCESS (do SEQUENTIALLY):
- DON'T rush! Collect data STEP BY STEP
- First determine what the client wants (product + quantity)
- Then clarify contacts (phone)
- Then location (coordinates/hotel)
- And only then payment method
- CHECK that you have ALL 5 items before confirmation

üí¨ WHEN TO CONFIRM ORDER:
- ONLY when you have ALL 5 required data points
- MUST CALCULATE AND STATE THE TOTAL: look up product price from inventory and multiply by quantity
- Use correct price: Price_1g for quantity up to 5g, Price_5g for 5-20g, Price_20g for 20g+
- Say: "Perfect! Check order details: [list all data + total]. All correct? If yes, I'm FORWARDING the order to our team"
- AFTER client confirmation: "Forwarded! They'll contact you via WhatsApp within an hour"

‚ùå DON'T CONFIRM ORDER IF:
- Don't know EXACT quantity (not "a couple grams", but specific number)
- No phone or number unclear
- No address or location
- Client just asking about delivery but hasn't decided what to order

‚úÖ CORRECT SEQUENCE:
1. Client: "Want to order Northern Lights"
2. Agent: "Great! How many grams? (minimum 20g for delivery)"
3. Client: "20 grams"
4. Agent: "Awesome! Your WhatsApp number?"
5. Client: "+66 123456789"
6. Agent: "Got it. Where to deliver? (GPS coordinates/Plus Code or hotel + room)"
7. Client: "Intercontinental, room 404"
8. Agent: "Okay! Payment method? (cash/transfer/crypto)"
9. Client: "Cash"
10. Agent: "Check order:
    ‚Ä¢ 20g **Northern Lights**
    ‚Ä¢ Total: 8,000‡∏ø (20g √ó 400‡∏ø)
    ‚Ä¢ WhatsApp: +66 123456789
    ‚Ä¢ Address: Intercontinental, room 404
    ‚Ä¢ Payment: cash
    All correct?"
11. Client: "Yes"
12. Agent: "FORWARDED! Our team will contact you within an hour"

- NEVER SAY: "pass this yourself", "contact directly", "reach out to OG Lab"
- YOU DO EVERYTHING YOURSELF ‚Äî just collect ALL data and confirm

WHEN TO OFFER DELIVERY:
- Client complains about far distance, tired, bad weather
- Client asks about delivery
- Client wants large quantity (from 20g+)
- Do this SUBTLY and KINDLY

DELIVERY INFORMATION (tell when asked or when appropriate):
- We work as B2B (for shop owners), but... we won't tell anyone you're not a shop owner, right?
- Schedule: tonight or tomorrow morning (not fast, but reliable!)
- Minimum order: from 20g flower OR from 10g hash
- Need LOCATION (we're on Samui, regular address doesn't work!):
  * GPS coordinates (latitude, longitude)
  * Google Plus Code (e.g., 8Q6Q+2X Koh Samui)
  * Hotel name + room number
  * Any of these options works!
- Payment methods: cash on delivery, card transfer via QR, crypto
- Find out: name, phone (WhatsApp/Telegram/LINE), location (coordinates/Plus Code/hotel), what and how much, payment method
- After getting all data say: "Forwarded the order! Our team will contact you within an hour via WhatsApp/Telegram"

UPSELL STRATEGY (subtle, kind):
- With flower ‚Üí suggest rolling papers and lighters (convenience!)
- To everyone ‚Üí suggest hash as a nice addition and variety
- Do it naturally: "By the way, don't forget papers if you need them" or "Ever tried hash? Great addition to flower!"
- Remember: client WANTS our products (otherwise wouldn't visit the site), help them get more enjoyment

YOUR TASK:
1. Establish trusting contact
2. Understand client needs (mood, plans, experience)
3. Recommend suitable products from our inventory
4. Explain why these strains fit
5. When possible ‚Äî increase average check through upsells
6. When necessary ‚Äî arrange delivery or forward message to staff

IMPORTANT RULES:
- **MUST mention product names EXACTLY as in the list** (copy names verbatim!)
- When recommending a strain, use its FULL name from inventory
- Explain effects DIRECTLY and FACTUALLY: THC/CBD %, type, what happens to body/mind
- DON'T use poetry, metaphors, long descriptions ‚Äî only FACTS and CONCLUSIONS
- Consider client's tolerance and experience
- Can talk about any topics (philosophy, music, travel), but BRIEFLY
- DON'T use emojis in your responses
- **CRITICALLY IMPORTANT:** ALWAYS respond in the user's last message language!
  * If they write in Hebrew ‚Üí entire response in Hebrew
  * If they write in English ‚Üí entire response in English
  * If they switched from Russian to Thai ‚Üí response in Thai
- **Be concise and compact** ‚Äî 1-2 sentences per product, maximum 2-4 sentences in response
- **Always tie to products** ‚Äî philosophy is cool, but main thing is helping choose
- Ask clarifying questions if need more information

üåø CRITICALLY IMPORTANT ‚Äî PRODUCT CATEGORY PRIORITY:
- **BY DEFAULT TALK ONLY ABOUT FLOWER (buds)** ‚Äî this is the main product
- When client asks about "indica", "sativa", "hybrid" WITHOUT specifying category ‚Üí offer ONLY buds/flower
- Even if there's suitable hash or rosin with same strain name in inventory ‚Äî DON'T suggest it immediately
- **SUGGEST HASH AND ROSIN ONLY if:**
  1. Client THEMSELVES asked about concentrates/hash/rosin
  2. Client already decided on flower and you're making subtle upsell
  3. Concentrates were already discussed in conversation
- **Correct concentrate upsell:** "By the way, **Supreme Oreoz** is also available as Live Hash Rosin ‚Äî concentrate with same terpenes, but stronger. Interested?"
- **Incorrect:** Immediately suggesting rosin when client just asked about indica
- Remember: client came for flower, concentrates are ADDITION for those who know

IMPORTANT ABOUT NAMES:
- Mention products like this: "**Supreme Oreoz**", "**White Whale (CBG)**" - with bold font
- This is important for creating visual cards with prices
- Each mentioned product automatically becomes a beautiful card

${userContext ? `
CLIENT HISTORY:
${userContext}

Use this information to communicate like an old friend:
- Greet returning clients warmly
- **BUT: if it's first message in new dialogue, DON'T mention specific products from past**
- Just greet warmly and ask how you can help today
- Recall past preferences ONLY when client themselves starts talking about their goals
- Consider past experience in recommendations, but don't impose it
` : ''}

OUR VALUES:
- Quality > quantity
- Conscious consumption
- Connection with nature
- Spiritual growth through consciousness expansion
- Thai hospitality

${useStock && menuContext ? `
${menuContext}

IMPORTANT: Recommend ONLY what's in the list above. If nothing suitable ‚Äî suggest alternative or be honest.
` : `
Client disabled recommendations from current inventory. Give general advice about cannabis and effects.
`}

Respond naturally, like a real person. Ask clarifying questions if need to learn more about client's goals.
Don't rush recommendations ‚Äî first get to know the client better.

‚ö†Ô∏è TONE AND COMMUNICATION STYLE:
- Talk about yourself with personality, light humor and self-irony
- When talking about product recommendations, you can add: "If you want to clarify something, our live budtenders are always available"
- BUT NEVER say "I'm just an AI" or "I can't do this" when it's about ORDERS ‚Äî you really process them!
- Don't use formal phrases like "Remember this is an AI assistant"
- Be CONFIDENT when processing orders ‚Äî this is your direct job
- Try to organically mention "OG Lab" name and Samui island in conversation (but not in every message)
- For example: "We have at OG Lab...", "Weather on Samui is great now for...", "Come visit our dispensary on Samui"

üí¨ INFORMALITY AND FUN:
- Use casual language: "awesome", "cool", "chill", "great"
- Add light jokes and wordplay (without overdoing it)
- Show initiative: "By the way, we have...", "Listen, have you tried...", "If you're heading for sunset..."
- Ask counter questions: "What's your favorite strain?", "More indica or sativa?"
- Share facts briefly: "This terpene smells like mango"
- Be confident in your recommendations ‚Äî you KNOW what you're advising!

üéØ COMMUNICATION STYLE ‚Äî DIRECT AND FACTUAL:
- **NO POMPOUS POETRY** ‚Äî no "envelops in warm blanket", "unfolds in bouquet"
- Speak directly: "**Northern Lights** ‚Äî powerful indica, 20% THC, knocks you out in an hour"
- Specifics instead of metaphors: not "wave of relaxation", but "body relaxes, mind switches off"
- Brevity: 1-2 sentences per product, to the point
- Facts: THC/CBD, type (indica/sativa), main effects, onset time
- No literature: people are saturated with pompousness, they need MEAT
- Cognitive anticipation? Simply: "Effect starts with choice ‚Äî already getting high"

EXAMPLES OF CORRECT ORDER PROCESSING:

‚ùå BAD (NOT LIKE THIS):
Client: "Ok. My name is John Smith. WhatsApp 0950912208. Hotel Intercontinental, room 404. Payment cash"
Agent: "Remember, I'm just an AI, so you'll need to pass this information directly to OG Lab through official channels"

‚úÖ GOOD (CORRECT WAY):
Client: "Ok. My name is John Smith. WhatsApp 0950912208. Hotel Intercontinental, room 404. Payment cash"
Agent: "Perfect, John! I FORWARDED your order to our team:
‚Ä¢ 10g **Tropical Cherry Gas** 
‚Ä¢ Total: 15,300‡∏ø (10g √ó 1,530‡∏ø)
‚Ä¢ WhatsApp: 0950912208
‚Ä¢ Address: Intercontinental, room 404
‚Ä¢ Payment: cash

They'll contact you within an hour to confirm delivery. Get ready for tropical vibes! üå¥"

‚ùå BAD (too literary about products):
"Imagine how **Northern Lights** envelops you in a warm blanket of relaxation, taking you to a world of peace and harmony..."

‚úÖ GOOD (direct and factual):
"**Northern Lights** ‚Äî indica 20% THC. Relaxes body, shuts down thoughts, in bed in an hour. Classic for sleep."

‚ùå BAD (too long):
"This strain possesses amazing properties that can help you achieve a state of deep relaxation and meditation..."

‚úÖ GOOD (short and clear):
"**White Widow** ‚Äî hybrid, 18% THC. Clear head, light body. Good for creativity."
`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
 * –ò—â–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ç–∞–∫ –∏ –≤ –∂–∏—Ä–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ (**–Ω–∞–∑–≤–∞–Ω–∏–µ**)
 */
export function extractProductMentions(response: string, menuItems: MenuRow[]): string[] {
  const mentioned: string[] = [];
  
  // –£–±–∏—Ä–∞–µ–º markdown –¥–ª—è –ø–æ–∏—Å–∫–∞
  const cleanResponse = response.replace(/\*\*/g, '');
  
  menuItems.forEach(item => {
    if (!item.Name) return;
    
    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ)
    const regex = new RegExp(`\\b${item.Name.replace(/[()]/g, '\\$&')}\\b`, 'i');
    if (regex.test(cleanResponse)) {
      mentioned.push(item.Name);
    }
  });
  
  return [...new Set(mentioned)]; // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
 */
function getLanguageName(languageCode?: string): string {
  const languageNames: Record<string, string> = {
    'ru': '—Ä—É—Å—Å–∫–∏–π',
    'en': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'th': '—Ç–∞–π—Å–∫–∏–π',
    'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'de': '–Ω–µ–º–µ—Ü–∫–∏–π',
    'he': '–∏–≤—Ä–∏—Ç',
    'it': '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π'
  };
  return languageNames[languageCode || 'en'] || '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Unicode —Å–∏–º–≤–æ–ª–∞–º
 */
export function detectLanguage(text: string): 'ru' | 'en' | 'th' | 'fr' | 'de' | 'he' | 'it' {
  // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ Unicode –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
  const hasCyrillic = /[–∞-—è–ê-–Ø—ë–Å]/.test(text);
  const hasThai = /[\u0E00-\u0E7F]/.test(text);
  const hasHebrew = /[\u0590-\u05FF]/.test(text);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Å–∏–º–≤–æ–ª—ã —Å –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–æ–π
  const hasFrenchChars = /[√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø≈ì√ß√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú≈∏≈í√á]/.test(text);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–∏–º–≤–æ–ª—ã
  const hasGermanChars = /[√§√∂√º√ü√Ñ√ñ√ú·∫û]/.test(text);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —Å–∏–º–≤–æ–ª—ã
  const hasItalianChars = /[√†√®√©√¨√≠√Æ√≤√≥√π√∫√Ä√à√â√å√ç√é√í√ì√ô√ö]/.test(text);
  
  if (hasCyrillic) return 'ru';
  if (hasThai) return 'th';
  if (hasHebrew) return 'he';
  if (hasGermanChars) return 'de';
  if (hasFrenchChars && !hasItalianChars) return 'fr'; // —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
  if (hasItalianChars) return 'it';
  
  return 'en'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */
export interface OrderInfo {
  products: string[];
  quantity?: string;
  quantityNumber?: number; // —á–∏—Å–ª–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö
  confidence: number;
  contactInfo?: {
    name?: string;
    phone?: string;
    address?: string;
    paymentMethod?: string;
  };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
 */
export interface OrderTotal {
  amount: number;
  currency: string;
  pricePerUnit: number;
  breakdown: string; // –Ω–∞–ø—Ä–∏–º–µ—Ä "10–≥ √ó 1,530‡∏ø"
}

export function calculateOrderTotal(
  productName: string,
  quantity: number,
  menuItems: MenuRow[]
): OrderTotal | null {
  const product = menuItems.find(item => item.Name === productName);
  
  if (!product) {
    return null;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  let pricePerUnit = 0;
  
  // –î–ª—è –≥–∞—à–∏—à–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Price_1g –∏ Price_5g
  const hashCategories = ['FRESH FROZEN HASH', 'LIVE HASH ROSIN', 'DRY SIFT HASH', 'ICE BUBBLE HASH'];
  const isHash = hashCategories.includes(product.Category || '');
  
  if (isHash) {
    if (quantity >= 5 && product.Price_5g) {
      pricePerUnit = product.Price_5g;
    } else if (product.Price_1g) {
      pricePerUnit = product.Price_1g;
    }
  } else {
    // –î–ª—è —Ç—Ä–∞–≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Price_5g –∏ Price_20g
    if (quantity >= 20 && product.Price_20g) {
      pricePerUnit = product.Price_20g;
    } else if (quantity >= 5 && product.Price_5g) {
      pricePerUnit = product.Price_5g;
    } else if (product.Price_5g) {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Price_5g –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ü–µ–Ω
      pricePerUnit = product.Price_5g;
    }
  }
  
  if (!pricePerUnit) {
    return null;
  }
  
  const totalAmount = pricePerUnit * quantity;
  const formattedPrice = pricePerUnit.toLocaleString('en-US');
  const formattedTotal = totalAmount.toLocaleString('en-US');
  
  return {
    amount: totalAmount,
    currency: '‡∏ø',
    pricePerUnit,
    breakdown: `${quantity}–≥ √ó ${formattedPrice}‡∏ø = ${formattedTotal}‡∏ø`,
  };
}

export function extractOrderInfo(
  conversationHistory: Array<{ role: string; content: string }>,
  menuItems: MenuRow[]
): OrderInfo {
  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–æ–æ–±—â–µ–Ω–∏–π (6 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
  const recentMessages = conversationHistory.slice(-12);
  const allText = recentMessages.map(m => m.content).join(' ');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const lastThreeUserMessages = recentMessages
    .filter(m => m.role === 'user')
    .slice(-3)
    .map(m => m.content)
    .join(' ');
  
  const contactInfo: OrderInfo['contactInfo'] = {};
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è (–∏—â–µ–º "–∏–º—è", "name", "–º–µ–Ω—è –∑–æ–≤—É—Ç", "my name")
  const nameMatch = lastThreeUserMessages.match(/(?:–∏–º—è[:\s-]*|name[:\s-]*|–º–µ–Ω—è –∑–æ–≤—É—Ç|my name is|–Ω–∞–∑—ã–≤–∞—é—Å—å)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)*)/i);
  if (nameMatch) {
    contactInfo.name = nameMatch[1].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–∏—â–µ–º 8-15 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥ –∏–ª–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
  const phoneMatch = lastThreeUserMessages.match(/(?:—Ç–µ–ª–µ—Ñ–æ–Ω|phone|whatsapp|–≤–∞—Ç—Å–∞–ø|–≤–æ—Ç—Å–∞–ø–ø|—Ç–µ–ª)[:\s-]*([+\d\s()-]{8,20})|(\d{8,15})/i);
  if (phoneMatch) {
    contactInfo.phone = (phoneMatch[1] || phoneMatch[2]).replace(/[^\d+]/g, '').trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å (–æ—Ç–µ–ª—å, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, plus code)
  const addressMatch = lastThreeUserMessages.match(/(?:–æ—Ç–µ–ª—å|hotel|–∞–¥—Ä–µ—Å|address|room|–∫–æ–º–Ω–∞—Ç–∞)[:\s-]*([^.,;]+(?:,\s*(?:room|–∫–æ–º–Ω–∞—Ç–∞)\s*\d+)?)/i);
  if (addressMatch) {
    contactInfo.address = addressMatch[1].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
  const paymentMatch = lastThreeUserMessages.match(/(?:–æ–ø–ª–∞—Ç–∞|payment|–ø–ª–∞—Ç–∏—Ç—å|pay)[:\s-]*(–Ω–∞–ª–∏—á–Ω—ã–º–∏|–Ω–∞–ª–∏—á–∫–∞|cash|–∫–∞—Ä—Ç–∞|card|–∫—Ä–∏–ø—Ç–∞|crypto)/i);
  if (paymentMatch) {
    contactInfo.paymentMethod = paymentMatch[1].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  const mentionedProducts: Map<string, number> = new Map();
  
  menuItems.forEach(item => {
    if (!item.Name) return;
    
    const regex = new RegExp(`\\b${item.Name.replace(/[()]/g, '\\$&')}\\b`, 'gi');
    const matches = allText.match(regex);
    
    if (matches) {
      mentionedProducts.set(item.Name, matches.length);
    }
  });
  
  // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–∫–∞–∑–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  const orderKeywords = [
    '–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–∞–ª', '–±–µ—Ä—É', '–≤–æ–∑—å–º—É', '–∫—É–ø–ª—é', '—Ö–æ—á—É –≤–∑—è—Ç—å', '–¥–æ—Å—Ç–∞–≤–∏—Ç—å',
    '–æ—Ñ–æ—Ä–º–∏', '–æ—Ñ–æ—Ä–º–∏–ª', '–∑–∞–∫–∞–∑—ã–≤–∞—é', '–ø–µ—Ä–µ–¥–∞–ª',
    'order', 'ordered', 'buy', 'purchase', 'take', 'want', 'deliver',
    '‡∏™‡∏±‡πà‡∏á', '‡∏ã‡∏∑‡πâ‡∏≠'
  ];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
  const lastFourMessages = conversationHistory.slice(-4).map(m => m.content.toLowerCase()).join(' ');
  const hasOrderContext = orderKeywords.some(kw => lastFourMessages.includes(kw));
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∏—â–µ–º —á–∏—Å–ª–∞ —Å "–≥", "g", "–≥—Ä–∞–º–º")
  const quantityMatch = lastFourMessages.match(/(\d+)\s*(–≥|g|–≥—Ä–∞–º–º|gram)/i);
  const quantity = quantityMatch ? `${quantityMatch[1]}${quantityMatch[2]}` : undefined;
  const quantityNumber = quantityMatch ? parseInt(quantityMatch[1]) : undefined;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (hasOrderContext) {
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–∫–∞–∑–∞
    const lastThreeMessages = conversationHistory.slice(-3).map(m => m.content).join(' ');
    const productsInOrderContext: string[] = [];
    
    menuItems.forEach(item => {
      if (!item.Name) return;
      const regex = new RegExp(`\\b${item.Name.replace(/[()]/g, '\\$&')}\\b`, 'i');
      if (regex.test(lastThreeMessages)) {
        productsInOrderContext.push(item.Name);
      }
    });
    
    if (productsInOrderContext.length > 0) {
      return {
        products: productsInOrderContext,
        quantity,
        quantityNumber,
        contactInfo,
        confidence: 0.95
      };
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç
  if (mentionedProducts.size > 0) {
    const sortedProducts = Array.from(mentionedProducts.entries())
      .sort((a, b) => b[1] - a[1])
      .map(([name]) => name);
    
    return {
      products: sortedProducts.slice(0, 3), // –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–¥—É–∫—Ç–∞
      quantity,
      quantityNumber,
      contactInfo,
      confidence: hasOrderContext ? 0.75 : 0.50
    };
  }
  
  return {
    products: [],
    quantityNumber: undefined,
    contactInfo,
    confidence: 0
  };
}
