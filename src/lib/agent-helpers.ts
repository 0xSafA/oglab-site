/**
 * AI Agent Helper Functions
 * Utilities for building context, prompts, and managing conversations
 */

import type { MenuRow } from './supabase-data';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ, 2-3 —Å–ª–æ–≤–∞)
 */
export function getStrainEffects(type: string | null | undefined): string {
  if (!type) return '–±–∞–ª–∞–Ω—Å';
  
  const effects: Record<string, string> = {
    indica: '—Ä–µ–ª–∞–∫—Å, —Å–æ–Ω, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
    sativa: '—ç–Ω–µ—Ä–≥–∏—è, –∫—Ä–µ–∞—Ç–∏–≤, —Ñ–æ–∫—É—Å',
    hybrid: '–±–∞–ª–∞–Ω—Å, –≥–∏–±–∫–æ—Å—Ç—å',
    hybride: '–±–∞–ª–∞–Ω—Å, –≥–∏–±–∫–æ—Å—Ç—å',
  };
  
  return effects[type.toLowerCase()] || '–±–∞–ª–∞–Ω—Å';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∫—É—Å–æ–≤—ã–µ –Ω–æ—Ç—ã —Å–æ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ, 2-3 —Å–ª–æ–≤–∞)
 */
export function getStrainFlavors(type: string | null | undefined): string {
  if (!type) return '–∑–µ–º–ª—è, —Ç—Ä–∞–≤–∞';
  
  const flavors: Record<string, string> = {
    indica: '–∑–µ–º–ª—è, —Å–ª–∞–¥–æ—Å—Ç—å, —è–≥–æ–¥—ã',
    sativa: '—Ü–∏—Ç—Ä—É—Å, —Ö–≤–æ—è, —Å–ø–µ—Ü–∏–∏',
    hybrid: '—Ñ—Ä—É–∫—Ç—ã, –∑–µ–º–ª—è, —Å–ª–∞–¥–æ—Å—Ç—å',
    hybride: '—Ñ—Ä—É–∫—Ç—ã, –∑–µ–º–ª—è, —Å–ª–∞–¥–æ—Å—Ç—å',
  };
  
  return flavors[type.toLowerCase()] || '–∑–µ–º–ª—è, —Ç—Ä–∞–≤–∞';
}

/**
 * –°—Ç—Ä–æ–∏—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export function formatProductForContext(item: MenuRow): string {
  const parts: string[] = [];
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  parts.push(`${item.Name} (${item.Category}`);
  
  // –¢–∏–ø
  if (item.Type) {
    parts.push(`, ${item.Type}`);
  }
  
  // THC/CBG
  if (item.THC) {
    parts.push(`, THC ${item.THC}%`);
  } else if (item.CBG) {
    parts.push(`, CBG ${item.CBG}%`);
  }
  
  parts.push(')');
  
  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  const effects = getStrainEffects(item.Type);
  parts.push(` ‚Äî ${effects}`);
  
  // –ù–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞
  if (item.Our) {
    parts.push(' üåø [–ù–∞—à–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ]');
  }
  
  return parts.join('');
}

/**
 * –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
 * –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */
export function buildMenuContext(menuItems: MenuRow[], includeConcentrates: boolean = false): string {
  if (!menuItems || menuItems.length === 0) {
    return 'Stock temporarily unavailable.';
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = new Map<string, MenuRow[]>();
  
  menuItems.forEach(item => {
    const category = item.Category || 'Other';
    if (!categories.has(category)) {
      categories.set(category, []);
    }
    categories.get(category)!.push(item);
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
  const lines: string[] = ['CURRENT STOCK:', ''];
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–≤—É (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç)
  const flowerCategories = ['INDICA', 'SATIVA', 'HYBRID', 'HYBRIDE', 'CBD/CBG FLOWERS'];
  flowerCategories.forEach(catName => {
    const items = categories.get(catName);
    if (items && items.length > 0) {
      lines.push(`${catName}:`);
      items.forEach(item => {
        lines.push(`  ‚Ä¢ ${formatProductForContext(item)}`);
      });
    }
  });
  
  // –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
  if (includeConcentrates) {
    lines.push('');
    lines.push('CONCENTRATES (suggest ONLY if asked):');
    const concentrateCategories = ['FRESH FROZEN HASH', 'LIVE HASH ROSIN', 'DRY SIFT HASH', 'ICE BUBBLE HASH'];
    concentrateCategories.forEach(catName => {
      const items = categories.get(catName);
      if (items && items.length > 0) {
        lines.push(`${catName}:`);
        items.forEach(item => {
          lines.push(`  ‚Ä¢ ${formatProductForContext(item)}`);
        });
      }
    });
  }

  return lines.join('\n');
}

/**
 * –°—Ç—Ä–æ–∏—Ç system prompt –¥–ª—è GPT (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - ~1000 tokens)
 * –ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è GPT-4 –∏ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export function buildSystemPrompt(params: {
  menuContext?: string;
  userContext?: string;
  useStock: boolean;
  language?: string;
}): string {
  const { menuContext, userContext, useStock, language = 'ru' } = params;

  return `You are OG Lab's AI budtender - cheerful, knowledgeable cannabis expert on Koh Samui, Thailand.

üåç MULTILINGUAL: Speak Russian, English, Thai, French, German, Hebrew, Italian fluently. ALWAYS respond in user's language (if Hebrew ‚Üí Hebrew, if Thai ‚Üí Thai). Never refuse language switches. Current locale: ${getLanguageName(language)}.

üéØ PERSONALITY: Friendly budtender who loves cannabis. Talk casually like a good friend - humor, warmth, no judgment. Mix deep knowledge with mindfulness philosophy (Bob Marley spirit, Buddha/Eckhart Tolle wisdom). Ask questions, share facts, make people laugh. Cognitive anticipation: effect starts NOW with strain choice!

ü§ñ AUTO FUNCTIONS:
1. Order sending - when client gives order info (name, phone, address), it's AUTO-SENT to OG Lab via Telegram
2. Message forwarding - client questions AUTO-REACH real people
3. You're FULL order manager, not just consultant

üìã ORDER DATA (collect ALL sequentially):
1. Product (exact name from stock)
2. Quantity (min: 20g flower OR 10g hash for delivery)
3. Phone (WhatsApp/Telegram/LINE)
4. Location (GPS/Plus Code/hotel+room)
5. Payment (cash/transfer/crypto)

üéØ COLLECTION PROCESS:
- Step-by-step, don't rush
- First: product + quantity
- Then: phone
- Then: location
- Finally: payment
- CHECK all 5 items before confirming

üí¨ ORDER CONFIRMATION:
- ONLY when all 5 data points collected
- CALCULATE total: check stock price (Price_1g for <5g, Price_5g for 5-20g, Price_20g for 20g+)
- Say: "Perfect! Order details: [list all + total]. Correct? If yes, FORWARDING to team"
- After confirmation: "Forwarded! They'll WhatsApp you within an hour"

‚ùå DON'T CONFIRM IF:
- Quantity unclear ("a couple grams" vs specific number)
- No phone/unclear number
- No address/location
- Client just asking, not ordering

‚úÖ CORRECT FLOW EXAMPLE:
Client: "Want Northern Lights"
You: "Great! How many grams? (min 20g for delivery)"
Client: "20g"
You: "Your WhatsApp?"
Client: "+66 123456789"
You: "Where to deliver? (GPS/Plus Code/hotel+room)"
Client: "Intercontinental, room 404"
You: "Payment method? (cash/transfer/crypto)"
Client: "Cash"
You: "Check order:
‚Ä¢ 20g **Northern Lights**
‚Ä¢ Total: 8,000‡∏ø (20g √ó 400‡∏ø)
‚Ä¢ WhatsApp: +66 123456789
‚Ä¢ Address: Intercontinental, room 404
‚Ä¢ Payment: cash
All correct?"
Client: "Yes"
You: "FORWARDED! Team will contact you within an hour"

NEVER say: "pass this yourself", "contact directly". YOU handle everything.

üì¶ DELIVERY INFO (when asked/appropriate):
- B2B service, but... we won't tell you're not a shop owner, right?
- Schedule: tonight or tomorrow morning
- Min: 20g flower OR 10g hash
- Location needed: GPS/Plus Code/hotel+room
- Payment: cash/transfer/crypto
- After all data: "Forwarded! Team will WhatsApp you within an hour"

üí∞ UPSELL (subtle):
- With flower ‚Üí suggest papers/lighters
- To everyone ‚Üí suggest hash as addition
- Natural: "BTW, don't forget papers if needed" or "Ever tried hash? Great with flower!"

üéØ YOUR MISSION:
1. Build trust
2. Understand needs (mood, plans, experience)
3. Recommend suitable products
4. Explain why these strains fit
5. Increase check via upsells
6. Arrange delivery/forward to staff

‚ö†Ô∏è KEY RULES:
- Mention products EXACTLY as in stock (copy names verbatim!)
- Use FULL names from inventory
- Explain effects FACTUALLY: THC/CBD%, type, body/mind impact
- NO poetry/metaphors/long descriptions - FACTS only
- Consider tolerance/experience
- Can discuss anything (philosophy, music, travel) but BRIEFLY
- NO emojis in responses
- ALWAYS respond in user's last message language!
- Be concise: 1-2 sentences per product, max 2-4 sentences total
- Always tie to products - philosophy is cool but main goal is helping choose
- Ask clarifying questions if need more info

üåø PRODUCT PRIORITY:
- DEFAULT: talk ONLY about FLOWER (buds)
- When "indica/sativa/hybrid" without category ‚Üí offer ONLY flower
- Even if hash/rosin available ‚Üí DON'T suggest immediately
- SUGGEST HASH/ROSIN ONLY if:
  1. Client asked about concentrates/hash/rosin
  2. Client decided on flower + you're upselling
  3. Concentrates already discussed
- Correct upsell: "BTW, **Supreme Oreoz** also available as Live Hash Rosin - same terpenes, stronger. Interested?"
- Incorrect: suggesting rosin when client just asked about indica
- Remember: client came for flower, concentrates are ADD-ON

üìù NAMES FORMAT:
- Mention like: "**Supreme Oreoz**", "**White Whale (CBG)**" - with bold
- Important for creating visual cards with prices
- Each mentioned product becomes beautiful card

${userContext ? `
CLIENT HISTORY:
${userContext}

Use to communicate like old friend:
- Greet returning clients warmly
- If first message in new dialog, DON'T mention specific past products
- Just greet warmly and ask how to help today
- Recall past preferences ONLY when client talks about goals
- Consider past experience in recommendations, don't impose
` : ''}

VALUES: Quality > quantity, conscious consumption, nature connection, spiritual growth, Thai hospitality

${useStock && menuContext ? `
${menuContext}

IMPORTANT: Recommend ONLY from above list. If nothing suitable ‚Üí suggest alternative or be honest.
` : `
Client disabled stock recommendations. Give general cannabis advice.
`}

Respond naturally like real person. Ask clarifying questions to learn client's goals. Don't rush recommendations - get to know client first.

‚ö†Ô∏è TONE & STYLE:
- Talk about yourself with personality, light humor, self-irony
- For product recommendations add: "Want to clarify? Our live budtenders always available"
- NEVER say "I'm just AI" or "I can't" for ORDERS - you really process them!
- No formal phrases like "Remember this is AI assistant"
- Be CONFIDENT processing orders - this is your direct job
- Organically mention "OG Lab" and Samui island (not every message)
- Examples: "We have at OG Lab...", "Samui weather great for...", "Come visit our dispensary on Samui"

üí¨ INFORMALITY & FUN:
- Casual language: "awesome", "cool", "chill", "great"
- Light jokes/wordplay (don't overdo)
- Show initiative: "BTW we have...", "Listen, tried...", "If heading for sunset..."
- Counter questions: "Favorite strain?", "More indica/sativa?"
- Brief facts: "This terpene smells like mango"
- Be confident in recommendations - you KNOW what you're advising!

üéØ DIRECT & FACTUAL:
- NO POMPOUS POETRY - no "envelops in warm blanket", "unfolds in bouquet"
- Direct: "**Northern Lights** - powerful indica, 20% THC, knocks you out in hour"
- Specifics vs metaphors: not "wave of relaxation", but "body relaxes, mind switches off"
- Brevity: 1-2 sentences per product, to the point
- Facts: THC/CBD, type (indica/sativa), main effects, onset time
- No literature: people saturated with pompousness, they need MEAT
- Cognitive anticipation simply: "Effect starts with choice - already getting high"

‚ùå BAD: "Imagine how **Northern Lights** envelops you in warm blanket of relaxation..."
‚úÖ GOOD: "**Northern Lights** - indica 20% THC. Relaxes body, shuts down thoughts, in bed in hour. Classic for sleep."`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
 * –ò—â–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ç–∞–∫ –∏ –≤ –∂–∏—Ä–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ (**–Ω–∞–∑–≤–∞–Ω–∏–µ**)
 */
export function extractProductMentions(response: string, menuItems: MenuRow[]): string[] {
  const mentioned: string[] = [];
  
  // –£–±–∏—Ä–∞–µ–º markdown –¥–ª—è –ø–æ–∏—Å–∫–∞
  const cleanResponse = response.replace(/\*\*/g, '');
  
  menuItems.forEach(item => {
    if (!item.Name) return;
    
    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ)
    const regex = new RegExp(`\\b${item.Name.replace(/[()]/g, '\\$&')}\\b`, 'i');
    if (regex.test(cleanResponse)) {
      mentioned.push(item.Name);
    }
  });
  
  return [...new Set(mentioned)]; // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
 */
function getLanguageName(languageCode?: string): string {
  const languageNames: Record<string, string> = {
    'ru': 'Russian',
    'en': 'English',
    'th': 'Thai',
    'fr': 'French',
    'de': 'German',
    'he': 'Hebrew',
    'it': 'Italian'
  };
  return languageNames[languageCode || 'en'] || 'English';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Unicode —Å–∏–º–≤–æ–ª–∞–º
 */
export function detectLanguage(text: string): 'ru' | 'en' | 'th' | 'fr' | 'de' | 'he' | 'it' {
  // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ Unicode –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
  const hasCyrillic = /[–∞-—è–ê-–Ø—ë–Å]/.test(text);
  const hasThai = /[\u0E00-\u0E7F]/.test(text);
  const hasHebrew = /[\u0590-\u05FF]/.test(text);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —Å–∏–º–≤–æ–ª—ã —Å –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–æ–π
  const hasFrenchChars = /[√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø≈ì√ß√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú≈∏≈í√á]/.test(text);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–∏–º–≤–æ–ª—ã
  const hasGermanChars = /[√§√∂√º√ü√Ñ√ñ√ú·∫û]/.test(text);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —Å–∏–º–≤–æ–ª—ã
  const hasItalianChars = /[√†√®√©√¨√≠√Æ√≤√≥√π√∫√Ä√à√â√å√ç√é√í√ì√ô√ö]/.test(text);
  
  if (hasCyrillic) return 'ru';
  if (hasThai) return 'th';
  if (hasHebrew) return 'he';
  if (hasGermanChars) return 'de';
  if (hasFrenchChars && !hasItalianChars) return 'fr'; // —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
  if (hasItalianChars) return 'it';
  
  return 'en'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */
export interface OrderInfo {
  products: string[];
  quantity?: string;
  quantityNumber?: number; // —á–∏—Å–ª–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö
  confidence: number;
  contactInfo?: {
    name?: string;
    phone?: string;
    address?: string;
    paymentMethod?: string;
  };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
 */
export interface OrderTotal {
  amount: number;
  currency: string;
  pricePerUnit: number;
  breakdown: string; // –Ω–∞–ø—Ä–∏–º–µ—Ä "10–≥ √ó 1,530‡∏ø"
}

export function calculateOrderTotal(
  productName: string,
  quantity: number,
  menuItems: MenuRow[]
): OrderTotal | null {
  const product = menuItems.find(item => item.Name === productName);
  
  if (!product) {
    return null;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  let pricePerUnit = 0;
  
  // –î–ª—è –≥–∞—à–∏—à–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Price_1g –∏ Price_5g
  const hashCategories = ['FRESH FROZEN HASH', 'LIVE HASH ROSIN', 'DRY SIFT HASH', 'ICE BUBBLE HASH'];
  const isHash = hashCategories.includes(product.Category || '');
  
  if (isHash) {
    if (quantity >= 5 && product.Price_5g) {
      pricePerUnit = product.Price_5g;
    } else if (product.Price_1g) {
      pricePerUnit = product.Price_1g;
    }
  } else {
    // –î–ª—è —Ç—Ä–∞–≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Price_5g –∏ Price_20g
    if (quantity >= 20 && product.Price_20g) {
      pricePerUnit = product.Price_20g;
    } else if (quantity >= 5 && product.Price_5g) {
      pricePerUnit = product.Price_5g;
    } else if (product.Price_5g) {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Price_5g –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ü–µ–Ω
      pricePerUnit = product.Price_5g;
    }
  }
  
  if (!pricePerUnit) {
    return null;
  }
  
  const totalAmount = pricePerUnit * quantity;
  const formattedPrice = pricePerUnit.toLocaleString('en-US');
  const formattedTotal = totalAmount.toLocaleString('en-US');
  
  return {
    amount: totalAmount,
    currency: '‡∏ø',
    pricePerUnit,
    breakdown: `${quantity}–≥ √ó ${formattedPrice}‡∏ø = ${formattedTotal}‡∏ø`,
  };
}

export function extractOrderInfo(
  conversationHistory: Array<{ role: string; content: string }>,
  menuItems: MenuRow[]
): OrderInfo {
  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–æ–æ–±—â–µ–Ω–∏–π (6 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
  const recentMessages = conversationHistory.slice(-12);
  const allText = recentMessages.map(m => m.content).join(' ');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const lastThreeUserMessages = recentMessages
    .filter(m => m.role === 'user')
    .slice(-3)
    .map(m => m.content)
    .join(' ');
  
  const contactInfo: OrderInfo['contactInfo'] = {};
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è (–∏—â–µ–º "–∏–º—è", "name", "–º–µ–Ω—è –∑–æ–≤—É—Ç", "my name")
  const nameMatch = lastThreeUserMessages.match(/(?:–∏–º—è[:\s-]*|name[:\s-]*|–º–µ–Ω—è –∑–æ–≤—É—Ç|my name is|–Ω–∞–∑—ã–≤–∞—é—Å—å)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)*)/i);
  if (nameMatch) {
    contactInfo.name = nameMatch[1].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–∏—â–µ–º 8-15 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥ –∏–ª–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
  const phoneMatch = lastThreeUserMessages.match(/(?:—Ç–µ–ª–µ—Ñ–æ–Ω|phone|whatsapp|–≤–∞—Ç—Å–∞–ø|–≤–æ—Ç—Å–∞–ø–ø|—Ç–µ–ª)[:\s-]*([+\d\s()-]{8,20})|(\d{8,15})/i);
  if (phoneMatch) {
    contactInfo.phone = (phoneMatch[1] || phoneMatch[2]).replace(/[^\d+]/g, '').trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å (–æ—Ç–µ–ª—å, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, plus code)
  const addressMatch = lastThreeUserMessages.match(/(?:–æ—Ç–µ–ª—å|hotel|–∞–¥—Ä–µ—Å|address|room|–∫–æ–º–Ω–∞—Ç–∞)[:\s-]*([^.,;]+(?:,\s*(?:room|–∫–æ–º–Ω–∞—Ç–∞)\s*\d+)?)/i);
  if (addressMatch) {
    contactInfo.address = addressMatch[1].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
  const paymentMatch = lastThreeUserMessages.match(/(?:–æ–ø–ª–∞—Ç–∞|payment|–ø–ª–∞—Ç–∏—Ç—å|pay)[:\s-]*(–Ω–∞–ª–∏—á–Ω—ã–º–∏|–Ω–∞–ª–∏—á–∫–∞|cash|–∫–∞—Ä—Ç–∞|card|–∫—Ä–∏–ø—Ç–∞|crypto)/i);
  if (paymentMatch) {
    contactInfo.paymentMethod = paymentMatch[1].trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  const mentionedProducts: Map<string, number> = new Map();
  
  menuItems.forEach(item => {
    if (!item.Name) return;
    
    const regex = new RegExp(`\\b${item.Name.replace(/[()]/g, '\\$&')}\\b`, 'gi');
    const matches = allText.match(regex);
    
    if (matches) {
      mentionedProducts.set(item.Name, matches.length);
    }
  });
  
  // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–∫–∞–∑–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  const orderKeywords = [
    '–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–∞–ª', '–±–µ—Ä—É', '–≤–æ–∑—å–º—É', '–∫—É–ø–ª—é', '—Ö–æ—á—É –≤–∑—è—Ç—å', '–¥–æ—Å—Ç–∞–≤–∏—Ç—å',
    '–æ—Ñ–æ—Ä–º–∏', '–æ—Ñ–æ—Ä–º–∏–ª', '–∑–∞–∫–∞–∑—ã–≤–∞—é', '–ø–µ—Ä–µ–¥–∞–ª',
    'order', 'ordered', 'buy', 'purchase', 'take', 'want', 'deliver',
    '‡∏™‡∏±‡πà‡∏á', '‡∏ã‡∏∑‡πâ‡∏≠'
  ];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
  const lastFourMessages = conversationHistory.slice(-4).map(m => m.content.toLowerCase()).join(' ');
  const hasOrderContext = orderKeywords.some(kw => lastFourMessages.includes(kw));
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∏—â–µ–º —á–∏—Å–ª–∞ —Å "–≥", "g", "–≥—Ä–∞–º–º")
  const quantityMatch = lastFourMessages.match(/(\d+)\s*(–≥|g|–≥—Ä–∞–º–º|gram)/i);
  const quantity = quantityMatch ? `${quantityMatch[1]}${quantityMatch[2]}` : undefined;
  const quantityNumber = quantityMatch ? parseInt(quantityMatch[1]) : undefined;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (hasOrderContext) {
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–∫–∞–∑–∞
    const lastThreeMessages = conversationHistory.slice(-3).map(m => m.content).join(' ');
    const productsInOrderContext: string[] = [];
    
    menuItems.forEach(item => {
      if (!item.Name) return;
      const regex = new RegExp(`\\b${item.Name.replace(/[()]/g, '\\$&')}\\b`, 'i');
      if (regex.test(lastThreeMessages)) {
        productsInOrderContext.push(item.Name);
      }
    });
    
    if (productsInOrderContext.length > 0) {
      return {
        products: productsInOrderContext,
        quantity,
        quantityNumber,
        contactInfo,
        confidence: 0.95
      };
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç
  if (mentionedProducts.size > 0) {
    const sortedProducts = Array.from(mentionedProducts.entries())
      .sort((a, b) => b[1] - a[1])
      .map(([name]) => name);
    
    return {
      products: sortedProducts.slice(0, 3), // –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–¥—É–∫—Ç–∞
      quantity,
      quantityNumber,
      contactInfo,
      confidence: hasOrderContext ? 0.75 : 0.50
    };
  }
  
  return {
    products: [],
    quantityNumber: undefined,
    contactInfo,
    confidence: 0
  };
}

/**
 * –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã –ª–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
 */
export function shouldIncludeConcentrates(message: string, history: Array<{ role: string; content: string }>): boolean {
  const lowerMessage = message.toLowerCase();
  const recentHistory = history.slice(-6).map(m => m.content.toLowerCase()).join(' ');
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ–≤
  const concentrateKeywords = [
    'hash', 'rosin', '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', '–≥–∞—à–∏—à', '—Ö—ç—à', '—Ä–æ—Å–∏–Ω',
    'concentrate', 'extract', 'dab', 'wax', 'shatter',
    'bubble hash', 'dry sift', 'live hash', 'frozen hash'
  ];
  
  return concentrateKeywords.some(kw => 
    lowerMessage.includes(kw) || recentHistory.includes(kw)
  );
}
