'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import type { PotPosition } from './PotController';

export default function PacmanTrail() {
  const pacmanRef = useRef<SVGSVGElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const trailRef = useRef<{ x: number; y: number; id: number }[]>([]);
  const [angle, setAngle] = useState(0);
  const [position, setPosition] = useState({ x: 68, y: 68 }); // pacmanSize + 20
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ö–æ—Ç—ã –Ω–∞ –≥–æ—Ä—à–æ—á–∫–∏
  const [isHunting, setIsHunting] = useState(false);
  const [targetPot, setTargetPot] = useState<PotPosition | null>(null);
  
  // Refs –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–Ω—É—Ç—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  const isHuntingRef = useRef(false);
  const targetPotRef = useRef<PotPosition | null>(null);
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const lastPositionRef = useRef({ x: 68, y: 68 });
  const lastAngleRef = useRef(0);
  const frameCountRef = useRef(0);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ event handlers —Å useCallback
  const handlePotSpawned = useCallback((event: CustomEvent) => {
    const newPot = event.detail as PotPosition;
    if (process.env.NODE_ENV === 'development') {
      console.log(`üéØ Pacman noticed new pot ${newPot.id} at (${newPot.x}, ${newPot.y})`);
    }
    
    // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ö–æ—Ç—É
    setIsHunting(true);
    setTargetPot(newPot);
    isHuntingRef.current = true;
    targetPotRef.current = newPot;
  }, []);

  const handlePotEaten = useCallback((event: CustomEvent) => {
    const { potId } = event.detail;
    if (process.env.NODE_ENV === 'development') {
      console.log(`üçΩÔ∏è Pacman finished eating pot ${potId}, returning to normal path`);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
    setIsHunting(false);
    setTargetPot(null);
    isHuntingRef.current = false;
    targetPotRef.current = null;
  }, []);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–æ—Ä—à–æ—á–∫–æ–≤
  useEffect(() => {

    if (typeof window !== 'undefined') {
      window.addEventListener('potSpawned', handlePotSpawned as EventListener);
      window.addEventListener('potEaten', handlePotEaten as EventListener);
    }

    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('potSpawned', handlePotSpawned as EventListener);
        window.removeEventListener('potEaten', handlePotEaten as EventListener);
      }
    };
  }, [handlePotSpawned, handlePotEaten]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const w = window.innerWidth;
    const h = window.innerHeight;

    // Set canvas size
    canvas.width = w;
    canvas.height = h;

    const pacmanSize = 48;
    const margin = pacmanSize + 20; // Add margin to keep Pacman visible
    
    let x = margin;
    let y = margin;
    let localAngle = 0;
    let lastId = 0;
    const path = [
      { x: margin, y: margin },
      { x: w - margin, y: margin },
      { x: w - margin, y: 200 },
      { x: margin, y: 200 },
      { x: margin, y: 350 },
      { x: w - margin, y: 350 },
      { x: w - margin, y: 500 },
      { x: margin, y: 500 },
      { x: margin, y: h - margin },
      { x: w / 2, y: h - margin },
      { x: w / 2, y: h / 2 },
      { x: w / 2 + 150, y: h / 2 },
      { x: w / 2 + 150, y: h - margin - 50 },
      { x: margin, y: h - margin - 50 },
    ];

    let pathIndex = 1;
    let target = path[pathIndex];
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –ø–∏–∫—Å–µ–ª—è—Ö –∑–∞ —Å–µ–∫—É–Ω–¥—É (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç FPS)
    const normalSpeed = 25; // –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É (–æ—á–µ–Ω—å —Å–ø–æ–∫–æ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
    const huntingSpeed = 50; // –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É (–±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –æ—Ö–æ—Ç–µ, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º)
    
    // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    let lastTime = performance.now();
    let animationFrame: number;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è (squared distance)
    const checkPotCollision = (pacX: number, pacY: number, pot: PotPosition) => {
      const dx = pacX + 24 - pot.x;
      const dy = pacY + 24 - pot.y;
      const distanceSquared = dx * dx + dy * dy;
      return distanceSquared < 1600; // 40 * 40 = 1600
    };

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ—Ä—à–æ—á–∫–∞
    const getActivePot = (): PotPosition | null => {
      if (typeof document === 'undefined') return null;
      
      const potData = document.body.dataset.activePot;
      if (!potData) return null;
      
      try {
        return JSON.parse(potData);
      } catch {
        return null;
      }
    };

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ trail
    const drawTrail = () => {
      const trail = trailRef.current;
      const trailLength = trail.length;
      
      // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å canvas –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã trail
      ctx.clearRect(0, 0, w, h);
      
      if (trailLength === 0) return;
      
      ctx.fillStyle = 'white';
      
      // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏ (–∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞) –ø–ª–æ—Ç–Ω—ã–µ, —Å—Ç–∞—Ä—ã–µ (–Ω–∞—á–∞–ª–æ) –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ
      for (let i = 0; i < trailLength; i++) {
        const point = trail[i];
        // i=0 - —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Ç–æ—á–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π)
        // i=trailLength-1 - —Å–∞–º–∞—è –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–ª–æ—Ç–Ω–æ–π)
        const normalizedAge = i / (trailLength - 1); // –û—Ç 0 (—Å—Ç–∞—Ä–∞—è) –¥–æ 1 (–Ω–æ–≤–∞—è)
        const opacity = Math.max(0.05, normalizedAge * 1.0); // –û—Ç 0.05 (—Å—Ç–∞—Ä–∞—è) –¥–æ 1.0 (–Ω–æ–≤–∞—è)
        
        ctx.globalAlpha = opacity;
        ctx.beginPath();
        ctx.arc(point.x + 24, point.y + 24, 24, 0, Math.PI * 2);
        ctx.fill();
      }
      
      // Restore opacity
      ctx.globalAlpha = 1;
    };

    const animate = (currentTime: number) => {
      // –í—ã—á–∏—Å–ª—è–µ–º deltaTime –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FPS
      const deltaTime = (currentTime - lastTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      lastTime = currentTime;
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º deltaTime –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      const clampedDeltaTime = Math.min(deltaTime, 0.05); // –º–∞–∫—Å–∏–º—É–º 50ms
      
      frameCountRef.current++;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ø–∏–∫—Å–µ–ª–∏ –≤ —Å–µ–∫—É–Ω–¥—É)
      const currentSpeed = isHuntingRef.current ? huntingSpeed : normalSpeed;
      const frameSpeed = currentSpeed * clampedDeltaTime; // –ø–∏–∫—Å–µ–ª–∏ –∑–∞ —ç—Ç–æ—Ç –∫–∞–¥—Ä
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ refs
      if (isHuntingRef.current && targetPotRef.current) {
        // –û—Ö–æ—Ç–∏–º—Å—è - –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –≥–æ—Ä—à–æ—á–∫—É
        target = { x: targetPotRef.current.x - 24, y: targetPotRef.current.y - 24 }; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –≥–æ—Ä—à–æ—á–∫–µ
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
        if (checkPotCollision(x, y, targetPotRef.current)) {
          // –°—ä–µ–ª–∏ –≥–æ—Ä—à–æ—á–µ–∫!
          if (process.env.NODE_ENV === 'development') {
            console.log(`üçΩÔ∏è Pacman ate pot ${targetPotRef.current.id}!`);
          }
          
          window.dispatchEvent(new CustomEvent('potEaten', { 
            detail: { potId: targetPotRef.current.id } 
          }));
        }
      } else {
        // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Å–ª–µ–¥—É–µ–º –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
        const dx = target.x - x;
        const dy = target.y - y;
        const absDx = Math.abs(dx);
        const absDy = Math.abs(dy);

        if (absDx < frameSpeed && absDy < frameSpeed) {
          x = target.x;
          y = target.y;
          pathIndex = (pathIndex + 1) % path.length;
          target = path[pathIndex];

          const nextDx = target.x - x;
          const nextDy = target.y - y;
          if (nextDx !== 0) localAngle = nextDx > 0 ? 0 : 180;
          else if (nextDy !== 0) localAngle = nextDy > 0 ? 90 : -90;
        }
      }
      
      // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      const dx = target.x - x;
      const dy = target.y - y;
      const absDx = Math.abs(dx);
      const absDy = Math.abs(dy);
      
      if (absDx > frameSpeed || absDy > frameSpeed) {
        // –°–Ω–∞—á–∞–ª–∞ –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –ø–æ—Ç–æ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        if (absDx > frameSpeed) {
          x += frameSpeed * Math.sign(dx);
          localAngle = dx > 0 ? 0 : 180;
        } else if (absDy > frameSpeed) {
          y += frameSpeed * Math.sign(dy);
          localAngle = dy > 0 ? 90 : -90;
        }
      }

      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º React state —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      const positionChanged = lastPositionRef.current.x !== x || lastPositionRef.current.y !== y;
      const angleChanged = lastAngleRef.current !== localAngle;
      
      if (positionChanged) {
        lastPositionRef.current = { x, y };
        setPosition({ x, y });
      }
      
      if (angleChanged) {
        lastAngleRef.current = localAngle;
        setAngle(localAngle);
      }

      // Add new trail point (offset 15px behind Pacman based on direction) - —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 2-–π –∫–∞–¥—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      if (frameCountRef.current % 2 === 0) {
        let trailX = x;
        let trailY = y;
        
        // Offset trail 15px in opposite direction of movement
        if (localAngle === 0) trailX -= 15;      // Moving right, trail goes left
        else if (localAngle === 180) trailX += 15; // Moving left, trail goes right  
        else if (localAngle === 90) trailY -= 15;  // Moving down, trail goes up
        else if (localAngle === -90) trailY += 15; // Moving up, trail goes down
        
        trailRef.current.push({ x: trailX, y: trailY, id: lastId++ });
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É trail
        if (trailRef.current.length > 370) {
          trailRef.current.shift();
        }
      }

      // Draw trail on canvas
      drawTrail();
      
      animationFrame = requestAnimationFrame(animate);
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –ø–µ—Ä–≤—ã–º timestamp
    animationFrame = requestAnimationFrame((time) => {
      lastTime = time;
      animate(time);
    });
    return () => cancelAnimationFrame(animationFrame);
  }, []);

  return (
    <>
      {/* Canvas for trail rendering */}
      <canvas
        ref={canvasRef}
        className="pacman-canvas"
        style={{
          width: '100%',
          height: '100%',
          willChange: 'contents',
          transform: 'translateZ(0)', // GPU acceleration
        }}
      />

      {/* SVG Pacman */}
      <svg
        ref={pacmanRef}
        className="pacman"
        viewBox="0 0 100 100"
        xmlns="http://www.w3.org/2000/svg"
        style={{
          left: `${position.x}px`,
          top: `${position.y}px`,
          willChange: 'transform',
          transform: 'translateZ(0)', // GPU acceleration
        }}
      >
        <g transform={`rotate(${angle}, 50, 50)`}>
          <defs>
            <mask id="mouth">
              <rect width="100" height="100" fill="white" />
              <path>
                <animate
                  attributeName="d"
                  dur="0.72s"
                  repeatCount="indefinite"
                  values="
                    M50,50 L100,30 A50,50 0 1,1 100,70 Z;
                    M50,50 L100,48 A50,50 0 1,1 100,52 Z;
                    M50,50 L100,30 A50,50 0 1,1 100,70 Z"
                />
              </path>
            </mask>
          </defs>
          <circle cx="50" cy="50" r="50" fill="#B0BF93" mask="url(#mouth)" />
          {/* –ì–ª–∞–∑ - –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ö–æ—Ç—ã */}
          {isHunting ? (
            // –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–π –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π –æ–≤–∞–ª—å–Ω—ã–π –≥–ª–∞–∑ –ø—Ä–∏ –æ—Ö–æ—Ç–µ
            <ellipse cx="40" cy="26" rx="8" ry="8.5" fill="#536C4A" transform="rotate(-20 40 26)" />
          ) : (
            // –û–±—ã—á–Ω—ã–π –∫—Ä—É–≥–ª—ã–π –≥–ª–∞–∑
            <circle cx="40" cy="26" r="9" fill="#536C4A" />
          )}
        </g>
      </svg>
    </>
  );
}
