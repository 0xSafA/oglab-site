'use client';

import { useEffect, useRef, useCallback, useState } from 'react';
import type { PotPosition } from './PotController';

export default function PacmanTrail() {
  const pacmanRef = useRef<SVGSVGElement>(null);
  const pacmanGroupRef = useRef<SVGGElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const trailRef = useRef<{ x: number; y: number; t: number; id: number }[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ö–æ—Ç—ã –Ω–∞ –≥–æ—Ä—à–æ—á–∫–∏
  const [isHunting, setIsHunting] = useState(false);
  const [targetPot, setTargetPot] = useState<PotPosition | null>(null);
  
  // Refs –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–Ω—É—Ç—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  const isHuntingRef = useRef(false);
  const targetPotRef = useRef<PotPosition | null>(null);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä (–∑–Ω–∞—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ refs)
  void targetPot;
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const frameCountRef = useRef(0);
  const lastDrawTimeRef = useRef(0);
  const minFrameMsRef = useRef(22); // ~45 FPS cap for drawing trail (movement stays smooth)
  const lastTrailCenterRef = useRef({ cx: 68 + 24, cy: 68 + 24 });

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ event handlers —Å useCallback
  const handlePotSpawned = useCallback((event: CustomEvent) => {
    const newPot = event.detail as PotPosition;
    if (process.env.NODE_ENV === 'development') {
      console.log(`üéØ Pacman noticed new pot ${newPot.id} at (${newPot.x}, ${newPot.y})`);
    }
    
    // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ö–æ—Ç—É
    setIsHunting(true);
    setTargetPot(newPot);
    isHuntingRef.current = true;
    targetPotRef.current = newPot;
  }, []);

  const handlePotEaten = useCallback((event: CustomEvent) => {
    const { potId } = event.detail;
    if (process.env.NODE_ENV === 'development') {
      console.log(`üçΩÔ∏è Pacman finished eating pot ${potId}, returning to normal path`);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
    setIsHunting(false);
    setTargetPot(null);
    isHuntingRef.current = false;
    targetPotRef.current = null;
  }, []);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–æ—Ä—à–æ—á–∫–æ–≤
  useEffect(() => {

    if (typeof window !== 'undefined') {
      window.addEventListener('potSpawned', handlePotSpawned as EventListener);
      window.addEventListener('potEaten', handlePotEaten as EventListener);
    }

    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('potSpawned', handlePotSpawned as EventListener);
        window.removeEventListener('potEaten', handlePotEaten as EventListener);
      }
    };
  }, [handlePotSpawned, handlePotEaten]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫ filter, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å any
      const ctx = canvas.getContext('2d') as (CanvasRenderingContext2D & { filter?: string }) | null;
    if (!ctx) return;

    const w = window.innerWidth;
    const h = window.innerHeight;
    const rawDpr = window.devicePixelRatio || 1;
    // Cap DPR on large screens/TVs to reduce fill cost
    const dpr = (w >= 1200) ? 1 : Math.min(2, Math.max(1, Math.floor(rawDpr)));

    // Set canvas size with HiDPI support
    canvas.width = w * dpr;
    canvas.height = h * dpr;
    canvas.style.width = `${w}px`;
    canvas.style.height = `${h}px`;
    ctx.scale(dpr, dpr);

    const pacmanSize = 48;
    const pacmanRadius = pacmanSize / 2; // 24
    const margin = pacmanSize + 20; // Add margin to keep Pacman visible
    
    let x = margin;
    let y = margin;
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—Ç—Ä–∞ —Ç—Ä–µ–π–ª–∞ —Å –ø–∞–∫–º–∞–Ω–æ–º
    lastTrailCenterRef.current = { cx: x + pacmanRadius, cy: y + pacmanRadius };
    let localAngle = 0;
    let lastId = 0;
    const path = [
      { x: margin, y: margin },
      { x: w - margin, y: margin },
      { x: w - margin, y: 200 },
      { x: margin, y: 200 },
      { x: margin, y: 350 },
      { x: w - margin, y: 350 },
      { x: w - margin, y: 500 },
      { x: margin, y: 500 },
      { x: margin, y: h - margin },
      { x: w / 2, y: h - margin },
      { x: w / 2, y: h / 2 },
      { x: w / 2 + 150, y: h / 2 },
      { x: w / 2 + 150, y: h - margin - 50 },
      { x: margin, y: h - margin - 50 },
    ];

    let pathIndex = 1;
    let target = path[pathIndex];
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –ø–∏–∫—Å–µ–ª—è—Ö –∑–∞ —Å–µ–∫—É–Ω–¥—É (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç FPS)
    const normalSpeed = 25; // –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É (–æ—á–µ–Ω—å —Å–ø–æ–∫–æ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
    const huntingSpeed = 50; // –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É (–±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –æ—Ö–æ—Ç–µ, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º)
    
    // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    let lastTime = performance.now();
    let animationFrame: number;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è (squared distance)
    const checkPotCollision = (pacX: number, pacY: number, pot: PotPosition) => {
      const dx = pacX + 24 - pot.x;
      const dy = pacY + 24 - pot.y;
      const distanceSquared = dx * dx + dy * dy;
      return distanceSquared < 1600; // 40 * 40 = 1600
    };

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ—Ä—à–æ—á–∫–∞
    const getActivePot = (): PotPosition | null => {
      if (typeof document === 'undefined') return null;
      
      const potData = document.body.dataset.activePot;
      if (!potData) return null;
      
      try {
        return JSON.parse(potData);
      } catch {
        return null;
      }
    };

    // Fade-layer –æ—Ç—Ä–∏—Å–æ–≤–∫–∞: O(1) –Ω–∞ –∫–∞–¥—Ä
    const drawTrail = (cx: number, cy: number) => {
      const radius = pacmanRadius;

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–µ—Ä–æ–≥–æ –Ω–∞–ª—ë—Ç–∞
      if (frameCountRef.current % 216 === 0) { // ~20% —Ä–µ–∂–µ –æ—á–∏—â–∞–µ–º ‚Üí —Ö–≤–æ—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ
        ctx.clearRect(0, 0, w, h);
      }

      // 1) –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞–¥—Ä–æ–≤ (fade layer)
      ctx.save();
      ctx.globalCompositeOperation = 'destination-out';
      ctx.globalAlpha = 0.05; // —á—É—Ç—å –º–µ–Ω—å—à–µ —Å—Ç–∏—Ä–∞–µ–º ‚Üí —Ö–≤–æ—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ (~+20%)
      ctx.fillRect(0, 0, w, h);
      ctx.restore();

      // 1.1) –ü—Ä–æ–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –ø–æ–¥ —Ç–µ–ª–æ–º –ø–∞–∫–º–∞–Ω–∞, —á—Ç–æ–±—ã —Ö–≤–æ—Å—Ç –Ω–µ –ø—Ä–æ—Å–≤–µ—á–∏–≤–∞–ª –≤–Ω—É—Ç—Ä–∏ —Ä—Ç–∞
      ctx.save();
      ctx.globalCompositeOperation = 'destination-out';
      ctx.beginPath();
      ctx.arc(cx, cy, radius + 1, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();

      // 2) –†–∏—Å—É–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É —Ö–≤–æ—Å—Ç–∞ (—Ä—è–¥–æ–º —Å –ø–∞–∫–º–∞–Ω–æ–º)
      ctx.save();
      ctx.globalCompositeOperation = 'source-over';
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —É —Ä—Ç–∞ ‚Äî –Ω–µ —Ä–∏—Å—É–µ–º "–∫–æ–º–æ–∫" –≤–æ–≤—Å–µ
      ctx.globalAlpha = 0.0;
      ctx.fillStyle = 'white';
      ctx.beginPath();
      ctx.arc(cx, cy, radius, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();

      // 3) –£—Å–∏–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ö–≤–æ—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–º –∞–ª—å—Ñ—ã:
      //    –¥–∞–ª—å–Ω–∏–π –∫—Ä–∞–π –±–ª–µ–¥–Ω—ã–π, —Å–µ—Ä–µ–¥–∏–Ω–∞ –ø–ª–æ—Ç–Ω–∞—è, —É —Ä—Ç–∞ ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
      const trail = trailRef.current;
      const n = trail.length;
      if (n > 1) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ –±–æ–ª–µ–µ 216 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ (~+20%)
        const maxSamples = 216;
        const startIndex = Math.max(0, n - maxSamples);
        const count = n - startIndex;
        const inv = count > 1 ? 1 / (count - 1) : 0;
        ctx.save();
        ctx.fillStyle = 'white';
        ctx.globalCompositeOperation = 'source-over';
        for (let k = 0; k < count; k++) {
          const i = startIndex + k;
          const p = trail[i];
          const t = k * inv; // 0..1 (—Å—Ç–∞—Ä—ã–π‚Üí–Ω–æ–≤—ã–π) –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
          let alpha: number;
          // t: 0 (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ö–≤–æ—Å—Ç) ‚Üí 1 (—É —Ä—Ç–∞ –ø–∞–∫–º–∞–Ω–∞)
          // –î–∞–ª—å–Ω–∏–π –∫—Ä–∞–π (—Å—Ç–∞—Ä—ã–µ 20%): –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –¥–æ 0.35
          if (t < 0.2) {
            alpha = 0.35 * (t / 0.2); // 0 ‚Üí 0.35
          // –ì–æ–ª–æ–≤–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20% –≤—Å–µ–≥–¥–∞ 95% –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ (alpha 0.05)
          } else if (t > 0.8) {
            alpha = 0.05;
          // –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ 0.7‚Äì0.8: –ª–∏–Ω–µ–π–Ω–æ –æ—Ç 1.0 –∫ 0.05
          } else if (t > 0.7) {
            const k = (t - 0.7) / 0.1; // 0..1
            alpha = 1 - 0.95 * k; // 1.0 ‚Üí 0.05
          } else {
            alpha = 1.0; // —Å–µ—Ä–µ–¥–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
          }
          if (alpha <= 0) continue;
          ctx.globalAlpha = alpha;
          ctx.beginPath();
          ctx.arc(p.x, p.y, radius, 0, Math.PI * 2);
          ctx.fill();
        }
        ctx.restore();
      }
    };

    const animate = (currentTime: number) => {
      // –í—ã—á–∏—Å–ª—è–µ–º deltaTime –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FPS
      const deltaTime = (currentTime - lastTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      lastTime = currentTime;
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º deltaTime –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      const clampedDeltaTime = Math.min(deltaTime, 0.05); // –º–∞–∫—Å–∏–º—É–º 50ms
      
      frameCountRef.current++;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ø–∏–∫—Å–µ–ª–∏ –≤ —Å–µ–∫—É–Ω–¥—É)
      const currentSpeed = isHuntingRef.current ? huntingSpeed : normalSpeed;
      const frameSpeed = currentSpeed * clampedDeltaTime; // –ø–∏–∫—Å–µ–ª–∏ –∑–∞ —ç—Ç–æ—Ç –∫–∞–¥—Ä
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ refs
      if (isHuntingRef.current && targetPotRef.current) {
        // –û—Ö–æ—Ç–∏–º—Å—è - –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –≥–æ—Ä—à–æ—á–∫—É
        target = { x: targetPotRef.current.x - 24, y: targetPotRef.current.y - 24 }; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –≥–æ—Ä—à–æ—á–∫–µ
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
        if (checkPotCollision(x, y, targetPotRef.current)) {
          // –°—ä–µ–ª–∏ –≥–æ—Ä—à–æ—á–µ–∫!
          if (process.env.NODE_ENV === 'development') {
            console.log(`üçΩÔ∏è Pacman ate pot ${targetPotRef.current.id}!`);
          }
          
          window.dispatchEvent(new CustomEvent('potEaten', { 
            detail: { potId: targetPotRef.current.id } 
          }));
        }
      } else {
        // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Å–ª–µ–¥—É–µ–º –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
        const dx = target.x - x;
        const dy = target.y - y;
        const absDx = Math.abs(dx);
        const absDy = Math.abs(dy);

        if (absDx < frameSpeed && absDy < frameSpeed) {
          x = target.x;
          y = target.y;
          pathIndex = (pathIndex + 1) % path.length;
          target = path[pathIndex];

          const nextDx = target.x - x;
          const nextDy = target.y - y;
          if (nextDx !== 0) localAngle = nextDx > 0 ? 0 : 180;
          else if (nextDy !== 0) localAngle = nextDy > 0 ? 90 : -90;
        }
      }
      
      // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      const dx = target.x - x;
      const dy = target.y - y;
      const absDx = Math.abs(dx);
      const absDy = Math.abs(dy);
      
      if (absDx > frameSpeed || absDy > frameSpeed) {
        // –°–Ω–∞—á–∞–ª–∞ –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –ø–æ—Ç–æ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        if (absDx > frameSpeed) {
          x += frameSpeed * Math.sign(dx);
          localAngle = dx > 0 ? 0 : 180;
        } else if (absDy > frameSpeed) {
          y += frameSpeed * Math.sign(dy);
          localAngle = dy > 0 ? 90 : -90;
        }
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–æ—Ä–æ—Ç SVG –±–µ–∑ React state
      if (pacmanRef.current) {
        pacmanRef.current.style.left = `${x}px`;
        pacmanRef.current.style.top = `${y}px`;
      }
      if (pacmanGroupRef.current) {
        pacmanGroupRef.current.setAttribute('transform', `rotate(${localAngle}, 50, 50)`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å–ª–µ–¥–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ –ø–∞–∫–º–∞–Ω–∞ (–ª–∞–≥ 1 –∫–∞–¥—Ä),
      // —á—Ç–æ–±—ã —Ö–≤–æ—Å—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –æ–ø–µ—Ä–µ–∂–∞–ª –ø—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
      {
        const tx = lastTrailCenterRef.current.cx;
        const ty = lastTrailCenterRef.current.cy;
        trailRef.current.push({ x: tx, y: ty, t: currentTime, id: lastId++ });
        lastTrailCenterRef.current = { cx: x + pacmanRadius, cy: y + pacmanRadius };
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª–∏–Ω—É —Ö–≤–æ—Å—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –Ω–∞ –ª—é–±—ã—Ö FPS
        const TRAIL_WINDOW_MS = 2400; // ~20% –¥–ª–∏–Ω–Ω–µ–µ –æ–∫–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const cutoff = currentTime - TRAIL_WINDOW_MS;
        while (trailRef.current.length && trailRef.current[0].t < cutoff) {
          trailRef.current.shift();
        }
        // –ó–∞—â–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ—á–µ–∫ (–≤–¥–æ–±–∞–≤–æ–∫ –∫ –æ–∫–Ω—É –≤—Ä–µ–º–µ–Ω–∏)
        if (trailRef.current.length > 624) {
          trailRef.current.splice(0, trailRef.current.length - 624);
        }
      }

      // Draw trail on canvas using fade-layer with lightweight FPS cap
      if (currentTime - lastDrawTimeRef.current >= minFrameMsRef.current) {
        drawTrail(x + pacmanRadius, y + pacmanRadius);
        lastDrawTimeRef.current = currentTime;
      }
      
      animationFrame = requestAnimationFrame(animate);
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –ø–µ—Ä–≤—ã–º timestamp
    animationFrame = requestAnimationFrame((time) => {
      lastTime = time;
      animate(time);
    });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—è–≥–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞: –æ—á–∏—â–∞–µ–º —Å–ª–µ–¥ –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const handleSoftRefresh = () => {
      try {
        trailRef.current = [];
        frameCountRef.current = 0;
        lastDrawTimeRef.current = 0;
        minFrameMsRef.current = 22;
        const ctx = canvas.getContext('2d');
        if (ctx) ctx.clearRect(0, 0, canvas.width, canvas.height);
        if (pacmanRef.current) {
          pacmanRef.current.style.left = `68px`;
          pacmanRef.current.style.top = `68px`;
        }
        if (pacmanGroupRef.current) {
          pacmanGroupRef.current.setAttribute('transform', `rotate(0, 50, 50)`);
        }
        console.log('üü° PacmanTrail: soft refresh performed');
      } catch {}
    };
    window.addEventListener('softRefresh', handleSoftRefresh as EventListener);

    return () => {
      cancelAnimationFrame(animationFrame);
      window.removeEventListener('softRefresh', handleSoftRefresh as EventListener);
    };
  }, []);

  return (
    <>
      {/* Canvas for trail rendering */}
      <canvas
        ref={canvasRef}
        className="pacman-canvas"
        style={{
          width: '100%',
          height: '100%',
          willChange: 'contents',
          transform: 'translateZ(0)', // GPU acceleration
        }}
      />

      {/* SVG Pacman */}
      <svg
        ref={pacmanRef}
        className="pacman"
        viewBox="0 0 100 100"
        xmlns="http://www.w3.org/2000/svg"
        style={{
          left: `68px`,
          top: `68px`,
          willChange: 'transform',
          transform: 'translateZ(0)', // GPU acceleration
        }}
      >
        <g ref={pacmanGroupRef} transform={`rotate(0, 50, 50)`}>
          <defs>
            <mask id="mouth">
              <rect width="100" height="100" fill="white" />
              <path>
                <animate
                  attributeName="d"
                  dur="0.72s"
                  repeatCount="indefinite"
                  values="
                    M50,50 L100,30 A50,50 0 1,1 100,70 Z;
                    M50,50 L100,48 A50,50 0 1,1 100,52 Z;
                    M50,50 L100,30 A50,50 0 1,1 100,70 Z"
                />
              </path>
            </mask>
          </defs>
          <circle cx="50" cy="50" r="50" fill="#B0BF93" mask="url(#mouth)" />
          {/* –ì–ª–∞–∑ - –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ö–æ—Ç—ã */}
          {isHunting ? (
            // –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–π –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π –æ–≤–∞–ª—å–Ω—ã–π –≥–ª–∞–∑ –ø—Ä–∏ –æ—Ö–æ—Ç–µ
            <ellipse cx="40" cy="26" rx="8" ry="8.5" fill="#536C4A" transform="rotate(-20 40 26)" />
          ) : (
            // –û–±—ã—á–Ω—ã–π –∫—Ä—É–≥–ª—ã–π –≥–ª–∞–∑
            <circle cx="40" cy="26" r="9" fill="#536C4A" />
          )}
        </g>
      </svg>
    </>
  );
}
