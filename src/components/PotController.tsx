'use client';

import { useEffect, useState } from 'react';

export interface PotPosition {
  id: string;
  x: number;
  y: number;
  isActive: boolean;
  createdAt: number;
}

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≥–æ—Ä—à–æ—á–∫–æ–≤ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
const POT_POSITIONS = [
  { x: 150, y: 200 },   // –õ–µ–≤—ã–π –≤–µ—Ä—Ö
  { x: 400, y: 150 },   // –¶–µ–Ω—Ç—Ä –≤–µ—Ä—Ö
  { x: 650, y: 300 },   // –ü—Ä–∞–≤—ã–π —Ü–µ–Ω—Ç—Ä
  { x: 300, y: 450 },   // –õ–µ–≤—ã–π –Ω–∏–∑
  { x: 550, y: 500 },   // –ü—Ä–∞–≤—ã–π –Ω–∏–∑
  { x: 200, y: 350 },   // –õ–µ–≤—ã–π —Ü–µ–Ω—Ç—Ä
  { x: 500, y: 250 },   // –¶–µ–Ω—Ç—Ä
  { x: 350, y: 100 },   // –¶–µ–Ω—Ç—Ä –≤–µ—Ä—Ö-2
];

const POT_CONFIG = {
  spawnInterval: 45000,      // –ü–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥
  lifeDuration: 25000,       // –ì–æ—Ä—à–æ—á–µ–∫ –∂–∏–≤–µ—Ç 25 —Å–µ–∫—É–Ω–¥
  maxActivePots: 1,          // –ú–∞–∫—Å–∏–º—É–º 1 –≥–æ—Ä—à–æ—á–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
};

export default function PotController() {
  const [activePots, setActivePots] = useState<PotPosition[]>([]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä—à–æ—á–∫–∞
  const spawnPot = () => {
    if (activePots.length >= POT_CONFIG.maxActivePots) {
      return; // –ù–µ —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –º–∞–∫—Å–∏–º—É–º
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const availablePositions = POT_POSITIONS.filter(pos => 
      !activePots.some(pot => pot.x === pos.x && pot.y === pos.y)
    );

    if (availablePositions.length === 0) {
      return; // –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    }

    const randomPos = availablePositions[Math.floor(Math.random() * availablePositions.length)];
    const newPot: PotPosition = {
      id: `pot-${Date.now()}-${Math.random()}`,
      x: randomPos.x,
      y: randomPos.y,
      isActive: true,
      createdAt: Date.now(),
    };

    setActivePots(prev => [...prev, newPot]);
    
    console.log(`üå± New pot spawned at (${newPot.x}, ${newPot.y})`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–∫–º–∞–Ω–∞
    if (typeof document !== 'undefined') {
      document.body.dataset.activePot = JSON.stringify(newPot);
      // –î–∏—Å–ø–∞—Ç—á–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–∞–∫–º–∞–Ω–∞
      window.dispatchEvent(new CustomEvent('potSpawned', { detail: newPot }));
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ lifeDuration
    setTimeout(() => {
      removePot(newPot.id);
    }, POT_CONFIG.lifeDuration);
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä—à–æ—á–∫–∞
  const removePot = (potId: string) => {
    setActivePots(prev => {
      const updatedPots = prev.filter(pot => pot.id !== potId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (typeof document !== 'undefined') {
        if (updatedPots.length > 0) {
          document.body.dataset.activePot = JSON.stringify(updatedPots[0]);
        } else {
          document.body.dataset.activePot = '';
        }
      }
      
      return updatedPots;
    });
    
    console.log(`üçΩÔ∏è Pot ${potId} removed`);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è "–ø–æ–µ–¥–∞–Ω–∏—è" –≥–æ—Ä—à–æ—á–∫–∞ –ø–∞–∫–º–∞–Ω–æ–º
  const eatPot = (potId: string) => {
    console.log(`üéÆ Pacman ate pot ${potId}!`);
    removePot(potId);
    
    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ —á—Ç–æ –≥–æ—Ä—à–æ—á–µ–∫ —Å—ä–µ–¥–µ–Ω
    if (typeof document !== 'undefined') {
      window.dispatchEvent(new CustomEvent('potEaten', { detail: { potId } }));
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥–æ—Ä—à–æ—á–∫–æ–≤
  const forceCleanup = () => {
    const now = Date.now();
    setActivePots(prev => {
      const cleaned = prev.filter(pot => now - pot.createdAt < POT_CONFIG.lifeDuration + 5000);
      if (cleaned.length !== prev.length) {
        console.log(`üßπ Force cleanup: removed ${prev.length - cleaned.length} old pots`);
      }
      return cleaned;
    });
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–æ—Ä—à–æ—á–∫–æ–≤
  useEffect(() => {
    // –ü–µ—Ä–≤—ã–π –≥–æ—Ä—à–æ—á–µ–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const initialTimeout = setTimeout(spawnPot, 10000);

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—à–æ—á–∫–æ–≤
    const spawnInterval = setInterval(() => {
      spawnPot();
    }, POT_CONFIG.spawnInterval);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
    const cleanupInterval = setInterval(forceCleanup, 20000);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–∞–∫–º–∞–Ω–∞
    const handlePotEaten = (event: CustomEvent) => {
      const { potId } = event.detail;
      eatPot(potId);
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('potEaten', handlePotEaten as EventListener);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearTimeout(initialTimeout);
      clearInterval(spawnInterval);
      clearInterval(cleanupInterval);
      if (typeof window !== 'undefined') {
        window.removeEventListener('potEaten', handlePotEaten as EventListener);
      }
      if (typeof document !== 'undefined') {
        document.body.dataset.activePot = '';
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ—Ä—à–æ—á–∫–æ–≤
  useEffect(() => {
    if (typeof document !== 'undefined') {
      if (activePots.length > 0) {
        document.body.dataset.activePot = JSON.stringify(activePots[0]);
      } else {
        document.body.dataset.activePot = '';
      }
    }
  }, [activePots]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π, —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π
  return null;
}
