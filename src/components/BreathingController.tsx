'use client';

import { useEffect, useState } from 'react';

/**
 * –ü–æ—Ä—è–¥–æ–∫ "–¥—ã—Ö–∞–Ω–∏—è" —Ü–≤–µ—Ç–æ–≤.
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø–∞–º –∫–∞–Ω–Ω–∞–±–∏—Å–∞ –≤ –º–µ–Ω—é
 */
const BREATHING_SEQUENCE = ['hybrid', 'sativa', 'indica'] as const;

/** –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥—ã—Ö–∞–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã) */
const BREATH_DURATION = 12;

/** –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ (—Å–µ–∫—É–Ω–¥—ã) */
const GROUP_PAUSE = 6;

/** –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã) */
const CYCLE_PAUSE = 15;

export default function BreathingController() {
  const [activeType, setActiveType] = useState<string | null>(null);
  const [isBreathing, setIsBreathing] = useState(false);

  useEffect(() => {
    let currentIndex = 0;
    let breathingTimeout: NodeJS.Timeout;
    let pauseTimeout: NodeJS.Timeout;

    const startBreathingCycle = () => {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
      setIsBreathing(true);
      
      const breatheNextType = () => {
        if (currentIndex < BREATHING_SEQUENCE.length) {
          const type = BREATHING_SEQUENCE[currentIndex];
          setActiveType(type);
          
          if (process.env.NODE_ENV === 'development') {
            console.log(`ü´Å Breathing: ${type} for ${BREATH_DURATION} seconds`);
            console.log(`üìä Animation: 3s per breath cycle, ${BREATH_DURATION / 3} cycles total`);
          }
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–ø–∞
          if (typeof document !== 'undefined') {
            document.body.dataset.breathingType = type;
            // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –Ω–∞ body –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            document.body.classList.remove('breathing-hybrid', 'breathing-sativa', 'breathing-indica');
            document.body.classList.add(`breathing-${type}`);
          }
          
          // –ß–µ—Ä–µ–∑ BREATH_DURATION —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ –∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
          breathingTimeout = setTimeout(() => {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ
            if (typeof document !== 'undefined') {
              document.body.dataset.breathingType = '';
              document.body.classList.remove('breathing-hybrid', 'breathing-sativa', 'breathing-indica');
            }
            
            currentIndex++;
            
            if (currentIndex < BREATHING_SEQUENCE.length) {
              // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
              if (process.env.NODE_ENV === 'development') {
                console.log(`‚è∏Ô∏è Pause between groups: ${GROUP_PAUSE} seconds`);
              }
              breathingTimeout = setTimeout(breatheNextType, GROUP_PAUSE * 1000);
            } else {
              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ü–∏–∫–ª–∞
              breatheNextType();
            }
          }, BREATH_DURATION * 1000);
        } else {
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª –¥—ã—Ö–∞–Ω–∏—è
          setActiveType(null);
          setIsBreathing(false);
          currentIndex = 0;
          
          if (typeof document !== 'undefined') {
            document.body.dataset.breathingType = '';
            document.body.classList.remove('breathing-hybrid', 'breathing-sativa', 'breathing-indica');
          }
          
          if (process.env.NODE_ENV === 'development') {
            console.log(`üò¥ Breathing cycle complete. Pausing for ${CYCLE_PAUSE}s...`);
          }
          
          // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
          pauseTimeout = setTimeout(startBreathingCycle, CYCLE_PAUSE * 1000);
        }
      };
      
      breatheNextType();
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª
    startBreathingCycle();

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearTimeout(breathingTimeout);
      clearTimeout(pauseTimeout);
      if (typeof document !== 'undefined') {
        document.body.dataset.breathingType = '';
      }
    };
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π, —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  // –ü–æ–º–µ—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä
  void activeType; // read-only usage
  void isBreathing; // read-only usage
  return null;
}
