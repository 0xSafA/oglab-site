'use client';

import { useEffect, useState } from 'react';

export default function AutoRefresh() {
  const [nextRefresh, setNextRefresh] = useState<Date | null>(null);

  useEffect(() => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
    const lastReloadKey = 'lastReloadTime';
    const minReloadInterval = 5000; // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
    
    const safeReload = (source: string) => {
      const now = Date.now();
      const lastReload = parseInt(localStorage.getItem(lastReloadKey) || '0');
      
      if (now - lastReload < minReloadInterval) {
        console.warn(`üö´ RELOAD BLOCKED: Too frequent reload attempt from ${source}. Last reload was ${now - lastReload}ms ago`);
        return;
      }
      
      localStorage.setItem(lastReloadKey, now.toString());
      console.log(`üîÑ RELOAD EXECUTING: ${source}`);
      window.location.reload();
    };

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (15 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    const calculateNextRefresh = () => {
      const now = new Date();
      const next = new Date(now.getTime() + 15 * 60 * 1000); // +15 –º–∏–Ω—É—Ç
      setNextRefresh(next);
      return next;
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const firstRefresh = calculateNextRefresh();
    
    console.log(`üîÑ Auto-refresh scheduled for: ${firstRefresh.toLocaleTimeString()}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (900 —Å–µ–∫—É–Ω–¥)
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å ISR revalidate –≤—Ä–µ–º–µ–Ω–∏
    const refreshInterval = setInterval(() => {
      console.log('üîÑ RELOAD SOURCE: 15-minute auto-refresh timer');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        safeReload('15-minute timer');
      }, 1000);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      calculateNextRefresh();
    }, 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    // –°–ª—É—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (Supabase realtime) –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
      import('@supabase/supabase-js').then(({ createClient }) => {
        const url = process.env.NEXT_PUBLIC_SUPABASE_URL as string
        const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string
        if (!url || !key) return
        const sb = createClient(url, key)
        // –°–ª—É—à–∞–µ–º –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ menu_items –∏ theme
        const sub = sb
          .channel('realtime-menu')
          .on('postgres_changes', { event: '*', schema: 'public', table: 'menu_items' }, () => {
            console.log('üîÑ RELOAD SOURCE: Supabase realtime - menu_items changed')
            safeReload('Supabase realtime - menu_items')
          })
          .on('postgres_changes', { event: '*', schema: 'public', table: 'menu_layout' }, () => {
            console.log('üîÑ RELOAD SOURCE: Supabase realtime - menu_layout changed')
            safeReload('Supabase realtime - menu_layout')
          })
          .on('postgres_changes', { event: '*', schema: 'public', table: 'theme' }, () => {
            console.log('üîÑ RELOAD SOURCE: Supabase realtime - theme changed')
            safeReload('Supabase realtime - theme')
          })
          // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞–º–∏
          .on('broadcast', { event: 'soft-refresh' }, () => {
            console.log('üü° SOFT-REFRESH RECEIVED: Admin broadcast - BUT IGNORING IT (temporarily disabled)')
            console.trace('üîç SOFT-REFRESH STACK TRACE:')
            // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: try { window.dispatchEvent(new Event('softRefresh')) } catch {}
          })
          .on('broadcast', { event: 'hard-refresh' }, () => {
            console.log('üîÑ RELOAD SOURCE: Admin broadcast - hard-refresh')
            safeReload('Admin broadcast - hard-refresh')
          })
          .subscribe()

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        window.addEventListener('beforeunload', () => {
          try { sb.removeChannel(sub) } catch {}
        })
      })
    } catch {}

    // ------------------------------
    // Watchdog: –¥–µ—Ç–µ–∫—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–π –∏ –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    // ------------------------------
    let rafId = 0;
    let lastRafBeat = typeof performance !== 'undefined' ? performance.now() : Date.now();
    let consecutiveStalls = 0;

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¢–í –∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const detectDeviceType = () => {
      if (typeof navigator === 'undefined' || typeof window === 'undefined') return { isTV: false, isSlowDevice: false };

      const ua = navigator.userAgent;
      
      // –î–µ—Ç–µ–∫—Ü–∏—è –¢–í –ø–æ User-Agent
      const isTVByUA = ua.includes('TV') || ua.includes('WebOS') || ua.includes('Tizen') || 
                       ua.includes('SmartTV') || ua.includes('BRAVIA') || ua.includes('NetCast');
      
      // –î–µ—Ç–µ–∫—Ü–∏—è –¢–í –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º —ç–∫—Ä–∞–Ω–∞
      const isTVByScreen = window.innerWidth >= 1920 && window.innerHeight >= 1080 && 
                          (!('ontouchstart' in window)); // –¢–í –æ–±—ã—á–Ω–æ –±–µ–∑ —Ç–∞—á-—Å–∫—Ä–∏–Ω–∞
      
      // –î–µ—Ç–µ–∫—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const isSlowDevice = (
        // –°—Ç–∞—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        !window.requestAnimationFrame ||
        !window.performance ||
        // –ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º —ç–∫—Ä–∞–Ω–µ (—Ä–∞—Å—Ç—è–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        (window.innerWidth >= 1920 && window.devicePixelRatio < 1.5) ||
        // –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ) - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ API
        (() => {
          const nav = navigator as Navigator & { deviceMemory?: number };
          return 'deviceMemory' in navigator && nav.deviceMemory && nav.deviceMemory <= 2;
        })()
      );

      return {
        isTV: isTVByUA || isTVByScreen,
        isSlowDevice
      };
    };

    const { isTV, isSlowDevice } = detectDeviceType();

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const getWatchdogParams = () => {
      if (isTV) {
        // –¢–í: –æ—á–µ–Ω—å –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const hasGoodPerformance = window.performance && 
                                  navigator.hardwareConcurrency && 
                                  navigator.hardwareConcurrency >= 4;
        return {
          timeout: 120_000, // 2 –º–∏–Ω—É—Ç—ã
          checkInterval: 30_000, // 30 —Å–µ–∫—É–Ω–¥
          maxStalls: 6,
          enabled: hasGoodPerformance // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –¢–í
        };
      } else if (isSlowDevice) {
        // –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        return {
          timeout: 60_000, // 1 –º–∏–Ω—É—Ç–∞
          checkInterval: 20_000, // 20 —Å–µ–∫—É–Ω–¥
          maxStalls: 4,
          enabled: true
        };
      } else {
        // –û–±—ã—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        return {
          timeout: 30_000, // 30 —Å–µ–∫—É–Ω–¥
          checkInterval: 10_000, // 10 —Å–µ–∫—É–Ω–¥
          maxStalls: 3,
          enabled: true
        };
      }
    };

    const watchdogParams = getWatchdogParams();
    const HEARTBEAT_TIMEOUT_MS = watchdogParams.timeout;
    const CHECK_EVERY_MS = watchdogParams.checkInterval;
    const MAX_CONSECUTIVE_STALLS = watchdogParams.maxStalls;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ watchdog –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const watchdogDisabled = !watchdogParams.enabled || process.env.NEXT_PUBLIC_DISABLE_WATCHDOG === 'true';

    const rafBeat = () => {
      lastRafBeat = typeof performance !== 'undefined' ? performance.now() : Date.now();
      rafId = requestAnimationFrame(rafBeat);
    };
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å rAF
    rafId = requestAnimationFrame(rafBeat);

    console.log(`üêï Watchdog: TV=${isTV}, slow=${isSlowDevice}, disabled=${watchdogDisabled}, timeout=${HEARTBEAT_TIMEOUT_MS}ms, check=${CHECK_EVERY_MS}ms, maxStalls=${MAX_CONSECUTIVE_STALLS}`);
    console.log(`üêï Device info: UA=${navigator.userAgent.substring(0, 50)}..., screen=${window.innerWidth}x${window.innerHeight}, cores=${navigator.hardwareConcurrency}`);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–≥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω)
    const watchdogInterval = !watchdogDisabled ? setInterval(() => {
      // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –ª–µ–≥–∏—Ç–∏–º–Ω–æ —Ç–æ—Ä–º–æ–∑–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã)
      if (typeof document !== 'undefined' && document.visibilityState === 'hidden') {
        consecutiveStalls = 0;
        return;
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
      const now = typeof performance !== 'undefined' ? performance.now() : Date.now();
      const lag = now - lastRafBeat;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const isLoading = typeof document !== 'undefined' && document.readyState !== 'complete';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏, —Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      const hasActiveAnimations = typeof document !== 'undefined' && 
        document.getAnimations && document.getAnimations().length > 0;

      if (lag > HEARTBEAT_TIMEOUT_MS && !isLoading && !hasActiveAnimations) {
        consecutiveStalls += 1;
        console.warn(`‚ö†Ô∏è Watchdog: main thread stall detected: ~${Math.round(lag)}ms (x${consecutiveStalls}) [TV: ${isTV}]`);
        
        if (consecutiveStalls >= MAX_CONSECUTIVE_STALLS) {
          console.warn('üîÑ RELOAD SOURCE: Watchdog - repeated main thread stalls detected');
          try {
            // –ú—è–≥–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—è–∫ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
            navigator.sendBeacon?.('/api/revalidate');
          } catch {}
          safeReload('Watchdog - main thread stalls');
        }
      } else {
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (consecutiveStalls > 0 && (lag <= HEARTBEAT_TIMEOUT_MS || hasActiveAnimations)) {
          console.log(`‚úÖ Watchdog: lag recovered or animations active, resetting stall counter`);
        }
        consecutiveStalls = 0;
      }
    }, CHECK_EVERY_MS) : null;

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö —Ä–∞–Ω—Ç–∞–π–º–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ watchdog –≤–∫–ª—é—á–µ–Ω)
    const onFatal = (e: unknown) => {
      console.error('üîÑ RELOAD SOURCE: Fatal error caught by watchdog:', e);
      setTimeout(() => safeReload('Fatal error'), 1000);
    };
    
    // –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ/–≤–æ–∑–≤—Ä–∞—Ç–µ —Å–µ—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ watchdog –≤–∫–ª—é—á–µ–Ω)
    const onOnline = () => {
      console.log('üîÑ RELOAD SOURCE: Network reconnection detected');
      safeReload('Network reconnection');
    };

    if (!watchdogDisabled) {
      window.addEventListener('error', onFatal);
      window.addEventListener('unhandledrejection', onFatal as EventListener);
      window.addEventListener('online', onOnline);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤/–ª–∏—Å—Ç–µ–Ω–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      clearInterval(refreshInterval);
      if (watchdogInterval) clearInterval(watchdogInterval);
      if (rafId) cancelAnimationFrame(rafId);
      if (!watchdogDisabled) {
        window.removeEventListener('error', onFatal);
        window.removeEventListener('unhandledrejection', onFatal as EventListener);
        window.removeEventListener('online', onOnline);
      }
    };
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π, —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
  useEffect(() => {
    if (!nextRefresh) return;

    const logInterval = setInterval(() => {
      const now = new Date();
      const timeLeft = Math.max(0, nextRefresh.getTime() - now.getTime());
      const minutesLeft = Math.floor(timeLeft / (1000 * 60));
      const secondsLeft = Math.floor((timeLeft % (1000 * 60)) / 1000);
      
      if (timeLeft > 0) {
        console.log(`‚è∞ Next auto-refresh in: ${minutesLeft}m ${secondsLeft}s`);
      }
    }, 60000); // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(logInterval);
  }, [nextRefresh]);

  return null;
}
