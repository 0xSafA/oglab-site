import { NextRequest, NextResponse } from 'next/server';

/**
 * Telegram Notification API
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ Telegram —á–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
 */

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export type NotificationType = 'order' | 'wish' | 'feedback' | 'staff_question' | 'general';

interface TelegramNotificationRequest {
  type: NotificationType;
  message: string;
  userId?: string;
  userContext?: {
    totalVisits?: number;
    totalMessages?: number;
    favoriteStrains?: string[];
    preferredEffects?: string[];
    language?: string;
  };
  products?: string[];
  quantity?: string;
  totalAmount?: number;
  breakdown?: string;
  contactInfo?: {
    name?: string;
    phone?: string;
    address?: string;
    paymentMethod?: string;
  };
  metadata?: Record<string, unknown>;
}

interface TelegramResponse {
  ok: boolean;
  result?: {
    message_id: number;
    chat: {
      id: number;
      title?: string;
    };
  };
  description?: string;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ Bot API
 */
async function sendTelegramMessage(
  chatId: string,
  text: string,
  parseMode: 'Markdown' | 'HTML' = 'HTML'
): Promise<TelegramResponse> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    throw new Error('TELEGRAM_BOT_TOKEN not configured');
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: parseMode,
      disable_web_page_preview: true,
    }),
  });

  return response.json();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function formatMessage(data: TelegramNotificationRequest): string {
  const { type, message, userId, userContext, products, quantity, totalAmount, breakdown, contactInfo } = data;
  
  const emoji = {
    order: 'üõí',
    wish: 'üí≠',
    feedback: '‚≠ê',
    staff_question: '‚ùì',
    general: 'üí¨',
  };

  const title = {
    order: '–ù–û–í–´–ô –ó–ê–ö–ê–ó',
    wish: '–ü–û–ñ–ï–õ–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê',
    feedback: '–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨',
    staff_question: '–í–û–ü–†–û–° –ü–ï–†–°–û–ù–ê–õ–£',
    general: '–°–û–û–ë–©–ï–ù–ò–ï',
  };

  let formatted = `<b>${emoji[type]} ${title[type]}</b>\n\n`;
  
  // ID –∫–ª–∏–µ–Ω—Ç–∞
  if (userId) {
    formatted += `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${userId.substring(0, 12)}...\n`;
  }
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞
  if (userContext) {
    if (userContext.totalVisits !== undefined) {
      formatted += `üìä <b>–í–∏–∑–∏—Ç–æ–≤:</b> ${userContext.totalVisits}\n`;
    }
    if (userContext.language) {
      const langEmoji = {
        ru: 'üá∑üá∫',
        en: 'üá¨üáß',
        th: 'üáπüá≠',
        de: 'üá©üá™',
        fr: 'üá´üá∑',
        he: 'üáÆüá±',
        it: 'üáÆüáπ',
      };
      formatted += `üó£Ô∏è <b>–Ø–∑—ã–∫:</b> ${langEmoji[userContext.language as keyof typeof langEmoji] || ''} ${userContext.language}\n`;
    }
    if (userContext.preferredEffects && userContext.preferredEffects.length > 0) {
      formatted += `üí´ <b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</b> ${userContext.preferredEffects.join(', ')}\n`;
    }
  }
  
  // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  if (type === 'order' && products && products.length > 0) {
    formatted += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    formatted += `<b>üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:</b>\n\n`;
    
    // –ü—Ä–æ–¥—É–∫—Ç—ã
    formatted += `üåø <b>–ü—Ä–æ–¥—É–∫—Ç:</b>\n`;
    products.forEach(product => {
      formatted += `   ${escapeHtml(product)}\n`;
    });
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (quantity) {
      formatted += `\nüì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${escapeHtml(quantity)}\n`;
    }
    
    // –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    if (totalAmount && breakdown) {
      formatted += `\nüí∞ <b>–°–£–ú–ú–ê:</b>\n`;
      formatted += `   ${escapeHtml(breakdown)}\n`;
      formatted += `   <b>–ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString('en-US')}‡∏ø</b>\n`;
    }
    
    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (contactInfo) {
      formatted += `\nüë§ <b>–ö–û–ù–¢–ê–ö–¢–´:</b>\n`;
      if (contactInfo.name) {
        formatted += `   –ò–º—è: ${escapeHtml(contactInfo.name)}\n`;
      }
      if (contactInfo.phone) {
        formatted += `   üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${escapeHtml(contactInfo.phone)}\n`;
      }
      if (contactInfo.address) {
        formatted += `   üìç –ê–¥—Ä–µ—Å: ${escapeHtml(contactInfo.address)}\n`;
      }
      if (contactInfo.paymentMethod) {
        formatted += `   üí≥ –û–ø–ª–∞—Ç–∞: ${escapeHtml(contactInfo.paymentMethod)}\n`;
      }
    }
    
    formatted += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    formatted += `\nüìù <b>–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${escapeHtml(message)}\n`;
    
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    formatted += `\nüìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${escapeHtml(message)}\n`;
    
    // –£–ø–æ–º—è–Ω—É—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (products && products.length > 0) {
      formatted += `\nüåø <b>–ü—Ä–æ–¥—É–∫—Ç—ã:</b>\n`;
      products.forEach(product => {
        formatted += `  ‚Ä¢ ${escapeHtml(product)}\n`;
      });
    }
  }
  
  // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  if (userContext?.favoriteStrains && userContext.favoriteStrains.length > 0) {
    formatted += `\nüìö <b>–†–∞–Ω–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏:</b>\n${userContext.favoriteStrains.slice(0, 3).map(s => escapeHtml(s)).join(', ')}\n`;
  }
  
  formatted += `\n<i>‚è∞ ${new Date().toLocaleString('ru-RU', { 
    timeZone: 'Asia/Bangkok',
    hour: '2-digit',
    minute: '2-digit',
    day: '2-digit',
    month: '2-digit',
  })}</i>`;
  
  formatted += `\n<i>ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ OG Lab Agent</i>`;
  
  return formatted;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram
 */
function escapeHtml(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function getTargetChatId(type: NotificationType): string | null {
  // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const chatIds = {
    order: process.env.TELEGRAM_ORDERS_CHAT_ID || process.env.TELEGRAM_CHAT_ID,
    wish: process.env.TELEGRAM_CHAT_ID,
    feedback: process.env.TELEGRAM_FEEDBACK_CHAT_ID || process.env.TELEGRAM_CHAT_ID,
    staff_question: process.env.TELEGRAM_CHAT_ID,
    general: process.env.TELEGRAM_CHAT_ID,
  };

  return chatIds[type] || process.env.TELEGRAM_CHAT_ID || null;
}

/**
 * POST /api/telegram/notify
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
export async function POST(request: NextRequest) {
  try {
    const body: TelegramNotificationRequest = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!body.type || !body.message) {
      return NextResponse.json(
        { error: 'Missing required fields: type, message' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not configured');
      return NextResponse.json(
        { error: 'Telegram bot not configured' },
        { status: 500 }
      );
    }

    const chatId = getTargetChatId(body.type);
    if (!chatId) {
      console.error('‚ùå TELEGRAM_CHAT_ID not configured');
      return NextResponse.json(
        { error: 'Telegram chat not configured' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const formattedMessage = formatMessage(body);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await sendTelegramMessage(chatId, formattedMessage, 'HTML');
    
    if (!telegramResponse.ok) {
      console.error('‚ùå TELEGRAM ERROR:', telegramResponse.description);
      return NextResponse.json(
        { 
          error: 'Failed to send Telegram notification',
          details: telegramResponse.description 
        },
        { status: 500 }
      );
    }

    console.log(`üì§ TELEGRAM: ${body.type} notification sent to chat ${chatId}`);
    console.log(`   Message ID: ${telegramResponse.result?.message_id}`);
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    // await supabase.from('telegram_notifications').insert({ ... })

    return NextResponse.json({
      success: true,
      messageId: telegramResponse.result?.message_id,
      chatId: telegramResponse.result?.chat.id,
    });

  } catch (error) {
    console.error('‚ùå Error in /api/telegram/notify:', error);
    
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/telegram/notify
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞
 */
export async function GET() {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken) {
      return NextResponse.json({
        status: 'error',
        message: 'TELEGRAM_BOT_TOKEN not configured',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
    const data = await response.json();

    if (!data.ok) {
      return NextResponse.json({
        status: 'error',
        message: 'Invalid bot token',
        details: data.description,
      });
    }

    const chatId = process.env.TELEGRAM_CHAT_ID;
    const ordersChat = process.env.TELEGRAM_ORDERS_CHAT_ID;
    const feedbackChat = process.env.TELEGRAM_FEEDBACK_CHAT_ID;

    return NextResponse.json({
      status: 'ok',
      bot: {
        id: data.result.id,
        username: data.result.username,
        name: data.result.first_name,
      },
      chats: {
        main: chatId ? `${chatId.substring(0, 5)}...` : 'not configured',
        orders: ordersChat ? `${ordersChat.substring(0, 5)}...` : 'using main',
        feedback: feedbackChat ? `${feedbackChat.substring(0, 5)}...` : 'using main',
      },
    });

  } catch (error) {
    return NextResponse.json({
      status: 'error',
      message: error instanceof Error ? error.message : 'Unknown error',
    });
  }
}
