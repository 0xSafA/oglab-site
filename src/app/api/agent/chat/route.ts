import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { fetchMenuWithOptions, type MenuRow } from '@/lib/supabase-data';
import { 
  buildMenuContext, 
  buildSystemPrompt, 
  extractProductMentions,
  detectLanguage,
  getStrainEffects,
  getStrainFlavors
} from '@/lib/agent-helpers';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –¢–∏–ø—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞
interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface ChatRequest {
  message: string;
  conversationHistory?: ChatMessage[];
  useStock?: boolean;
  userContext?: string; // —Å–∂–∞—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  isReturningUser?: boolean; // —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  language?: string; // —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

interface ProductCard {
  name: string;
  category: string;
  type?: string;
  thc?: string;
  cbg?: string;
  price_1g?: number;
  price_5g?: number;
  price_20g?: number;
  isOur?: boolean;
  effects?: string; // –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  flavors?: string; // –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–æ–≤
}

interface ChatResponse {
  reply: string;
  suggestedProducts: string[];
  productCards?: ProductCard[]; // –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
  greeting?: string; // –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  error?: string;
}

// –ö—ç—à –º–µ–Ω—é (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç)
// –ö—ç—à–∏—Ä—É–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
let menuCache: {
  contextText: string;
  rows: MenuRow[];
  timestamp: number;
} | null = null;

const MENU_CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function getMenuData(): Promise<{ contextText: string; rows: MenuRow[] }> {
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (menuCache && (now - menuCache.timestamp) < MENU_CACHE_TTL) {
    console.log('üì¶ Using cached menu (age:', Math.floor((now - menuCache.timestamp) / 1000), 'sec)');
    return {
      contextText: menuCache.contextText,
      rows: menuCache.rows,
    };
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–µ–µ –º–µ–Ω—é
  console.log('üîÑ Fetching fresh menu from database');
  try {
    const { rows } = await fetchMenuWithOptions();
    const contextText = buildMenuContext(rows);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ rows)
    menuCache = {
      contextText,
      rows,
      timestamp: now,
    };
    
    console.log('‚úÖ Menu cached:', rows.length, 'items');
    return { contextText, rows };
  } catch (error) {
    console.error('‚ùå Error fetching menu:', error);
    return {
      contextText: '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
      rows: [],
    };
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: ChatRequest = await request.json();
    const { 
      message, 
      conversationHistory = [], 
      useStock = true, 
      userContext,
      isReturningUser = false,
      language: userLanguage,
    } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!message || message.trim().length === 0) {
      return NextResponse.json(
        { error: 'Message is required' },
        { status: 400 }
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏–º)
    const language = userLanguage || detectLanguage(message);
    console.log(`üó£Ô∏è Language: ${language}, Returning user: ${isReturningUser}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    let menuData: { contextText: string; rows: MenuRow[] } | null = null;
    if (useStock) {
      menuData = await getMenuData();
    }

    // –°—Ç—Ä–æ–∏–º system prompt
    const systemPrompt = buildSystemPrompt({
      menuContext: menuData?.contextText,
      userContext,
      useStock,
      language,
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–æ—Ä–∏–∏ (6 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
    const recentHistory = conversationHistory.slice(-12);
    
    const messages: ChatMessage[] = [
      { role: 'system', content: systemPrompt },
      ...recentHistory,
      { role: 'user', content: message },
    ];

    console.log(`üí¨ Sending request to OpenAI (${messages.length} messages)`);
    console.log(`üìä Token estimate: ~${JSON.stringify(messages).length / 4} tokens`);

    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview', // –∏–ª–∏ 'gpt-4' –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      messages: messages as OpenAI.Chat.Completions.ChatCompletionMessageParam[],
      temperature: 0.8, // –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
      max_tokens: 500, // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
      presence_penalty: 0.3, // –∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      frequency_penalty: 0.3,
    });

    const reply = completion.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º—è–Ω—É—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ò–ó–ë–ï–ì–ê–ï–ú –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î!)
    let suggestedProducts: string[] = [];
    let productCards: ProductCard[] = [];
    if (useStock && menuData && menuData.rows.length > 0) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º rows –∏–∑ –∫—ç—à–∞ –≤–º–µ—Å—Ç–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
        const rows = menuData.rows;
        suggestedProducts = extractProductMentions(reply, rows);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∏ –≤–∫—É—Å–∞–º–∏
        productCards = suggestedProducts
          .map(productName => {
            const product = rows.find(r => r.Name === productName);
            if (!product) return null;
            
            const card: ProductCard = {
              name: product.Name || productName,
              category: product.Category || '',
              type: product.Type ?? undefined,
              thc: product.THC ? String(product.THC) : undefined,
              cbg: product.CBG ? String(product.CBG) : undefined,
              price_1g: product.Price_1g ?? undefined,
              price_5g: product.Price_5g ?? undefined,
              price_20g: product.Price_20g ?? undefined,
              isOur: product.Our ?? undefined,
              effects: getStrainEffects(product.Type),
              flavors: getStrainFlavors(product.Type),
            };
            
            return card;
          })
          .filter((card): card is ProductCard => card !== null);
      } catch (error) {
        console.error('Error extracting products:', error);
      }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log('‚úÖ Chat response generated:', {
      userMessage: message.substring(0, 50),
      replyLength: reply.length,
      suggestedProducts: suggestedProducts.length,
      tokensUsed: completion.usage?.total_tokens,
      model: completion.model,
      hasUserContext: !!userContext,
      isReturningUser,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    const response: ChatResponse = {
      reply,
      suggestedProducts,
      productCards,
    };

    return NextResponse.json(response, { status: 200 });

  } catch (error) {
    console.error('‚ùå Error in /api/agent/chat:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI
    if (error instanceof OpenAI.APIError) {
      return NextResponse.json(
        { 
          error: 'AI service error', 
          reply: '–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ üîß –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∂–∏–≤–æ–º—É –±–∞–¥—Ç–µ–Ω–¥–µ—Ä—É.',
          suggestedProducts: [],
        },
        { status: 500 }
      );
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return NextResponse.json(
      { 
        error: 'Internal server error',
        reply: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî –ù–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!',
        suggestedProducts: [],
      },
      { status: 500 }
    );
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
export async function GET() {
  const cacheAge = menuCache ? Math.floor((Date.now() - menuCache.timestamp) / 1000) : null;
  const cacheExpired = menuCache ? (Date.now() - menuCache.timestamp) >= MENU_CACHE_TTL : true;
  
  return NextResponse.json({
    status: 'ok',
    service: 'OG Lab Agent',
    model: 'gpt-4-turbo-preview',
    cache: {
      exists: !!menuCache,
      age_seconds: cacheAge,
      ttl_seconds: MENU_CACHE_TTL / 1000,
      expired: cacheExpired,
      items_count: menuCache?.rows.length || 0,
    },
  });
}

// HEAD endpoint –¥–ª—è prefetch –∫—ç—à–∞ (–ø—Ä–æ–≥—Ä–µ–≤)
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
export async function HEAD() {
  try {
    // –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é - –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –æ–Ω –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω
    const menuData = await getMenuData();
    
    return new NextResponse(null, {
      status: 200,
      headers: {
        'X-Cache-Status': menuCache ? 'hit' : 'miss',
        'X-Items-Count': String(menuData.rows.length),
        'X-Cache-Age': String(menuCache ? Math.floor((Date.now() - menuCache.timestamp) / 1000) : 0),
      },
    });
  } catch (error) {
    console.error('Error prefetching menu:', error);
    return new NextResponse(null, { status: 500 });
  }
}
