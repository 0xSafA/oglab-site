import { NextRequest } from 'next/server';
import OpenAI from 'openai';
import { fetchMenuWithOptions, type MenuRow } from '@/lib/supabase-data';
import { 
  buildMenuContext, 
  buildSystemPrompt, 
  extractProductMentions,
  detectLanguage,
  getStrainEffects,
  getStrainFlavors,
  extractOrderInfo,
  calculateOrderTotal,
  shouldIncludeConcentrates
} from '@/lib/agent-helpers';
import { 
  getOrCreateUserProfileServer, 
  buildUserContextFromProfile,
  updateUserProfile
} from '@/lib/user-profile-db';
import type { UserProfile } from '@/lib/supabase-client';
import { 
  createConversationServer, 
  addMessageToConversationServer,
  type ConversationMessage 
} from '@/lib/conversations-db';
import { trackEventServer } from '@/lib/analytics-db';
import { 
  getCached, 
  setCached, 
  CacheKeys, 
  CacheTTL,
  isRedisAvailable 
} from '@/lib/redis-client';
import { findSimilarCachedQuery, addToSemanticCache } from '@/lib/semantic-cache';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –¢–∏–ø—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞
interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface ChatRequest {
  message: string;
  conversationHistory?: ChatMessage[];
  useStock?: boolean;
  userContext?: string; // —Å–∂–∞—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  isReturningUser?: boolean; // —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  language?: string; // —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userId?: string; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Supabase
  conversationId?: string; // ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  stream?: boolean; // —Ñ–ª–∞–≥ –¥–ª—è streaming (default: true)
  telegramUserId?: number; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å)
}

// Localized label for order totals
function getTotalLabelByLanguage(language: 'ru' | 'en' | 'th' | 'fr' | 'de' | 'he' | 'it'): string {
  switch (language) {
    case 'ru':
      return '–ò—Ç–æ–≥–æ';
    case 'th':
      return '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°';
    case 'fr':
      return 'Total';
    case 'de':
      return 'Gesamt';
    case 'he':
      return '◊°◊î◊¥◊õ';
    case 'it':
      return 'Totale';
    case 'en':
    default:
      return 'Total';
  }
}

interface ProductCard {
  name: string;
  category: string;
  type?: string;
  thc?: string;
  cbg?: string;
  price_1g?: number;
  price_5g?: number;
  price_20g?: number;
  isOur?: boolean;
  effects?: string; // –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  flavors?: string; // –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–æ–≤
}

// –ö—ç—à –º–µ–Ω—é (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç)
let menuCache: {
  contextText: string;
  contextTextWithConcentrates: string;
  rows: MenuRow[];
  timestamp: number;
} | null = null;

const MENU_CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∏–∑ Redis/Memory –∫—ç—à–∞ –∏–ª–∏ –ë–î (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
 */
async function getMenuData(): Promise<{ 
  contextText: string; 
  contextTextWithConcentrates: string;
  rows: MenuRow[];
}> {
  const now = Date.now();
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
  if (isRedisAvailable()) {
    const redisMenu = await getCached<typeof menuCache>(CacheKeys.menuItems());
    if (redisMenu) {
      console.log('‚ö° Redis menu cache hit');
      menuCache = redisMenu; // –û–±–Ω–æ–≤–ª—è–µ–º –∏ memory cache
      return {
        contextText: redisMenu.contextText,
        contextTextWithConcentrates: redisMenu.contextTextWithConcentrates,
        rows: redisMenu.rows,
      };
    }
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º memory cache
  if (menuCache && (now - menuCache.timestamp) < MENU_CACHE_TTL) {
    console.log('üì¶ Memory cache hit (age:', Math.floor((now - menuCache.timestamp) / 1000), 'sec)');
    return {
      contextText: menuCache.contextText,
      contextTextWithConcentrates: menuCache.contextTextWithConcentrates,
      rows: menuCache.rows,
    };
  }
  
  // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–µ–µ –º–µ–Ω—é –∏–∑ –ë–î
  console.log('üîÑ Fetching fresh menu from DB');
  try {
    const { rows } = await fetchMenuWithOptions();
    const contextText = buildMenuContext(rows, false);
    const contextTextWithConcentrates = buildMenuContext(rows, true);
    
    menuCache = {
      contextText,
      contextTextWithConcentrates,
      rows,
      timestamp: now,
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    if (isRedisAvailable()) {
      await setCached(CacheKeys.menuItems(), menuCache, CacheTTL.menuItems);
      console.log('‚úÖ Menu cached to Redis:', rows.length, 'items');
    }
    
    console.log('‚úÖ Menu cached to memory:', rows.length, 'items');
    return { contextText, contextTextWithConcentrates, rows };
  } catch (error) {
    console.error('‚ùå Error fetching menu:', error);
    return {
      contextText: 'Stock temporarily unavailable.',
      contextTextWithConcentrates: 'Stock temporarily unavailable.',
      rows: [],
    };
  }
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    const body: ChatRequest = await request.json();
    const { 
      message, 
      conversationHistory = [], 
      useStock = true, 
      userContext,
      // isReturningUser = false, // unused, kept for potential future logic
      language: userLanguage,
      stream = true,
      userId,
      conversationId,
      telegramUserId,
    } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!message || message.trim().length === 0) {
      return Response.json(
        { error: 'Message is required' },
        { status: 400 }
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    const language = userLanguage || detectLanguage(message);
    
    // ‚úÖ SUPABASE: –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userProfile: UserProfile | undefined;
    let currentConversationId = conversationId;
    
    try {
      userProfile = await getOrCreateUserProfileServer(userId, telegramUserId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      await updateUserProfile(userProfile.id, {
        total_messages: userProfile.total_messages + 1,
      });
      
      // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
      if (!currentConversationId) {
        const newConversation = await createConversationServer(
          userProfile.id,
          telegramUserId ? 'telegram' : 'web',
          language
        );
        currentConversationId = newConversation.id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        await updateUserProfile(userProfile.id, {
          total_conversations: userProfile.total_conversations + 1,
        });
        
        console.log('‚úÖ New conversation:', currentConversationId);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage: ConversationMessage = {
        role: 'user',
        content: message,
        timestamp: Date.now(),
        detectedLanguage: language,
      };
      
      await addMessageToConversationServer(currentConversationId, userMessage);
      
      // –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
      void trackEventServer({
        userProfileId: userProfile.id,
        conversationId: currentConversationId,
        eventType: 'chat_message',
        eventData: {
          message: message.substring(0, 100), // –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
          language,
          messageLength: message.length,
        },
        channel: telegramUserId ? 'telegram' : 'web',
      });
      
      console.log(`üó£Ô∏è User: ${userProfile.user_id}, Lang: ${language}, Stream: ${stream}`);
      
    } catch (error) {
      console.error('‚ö†Ô∏è Error with user profile/conversation:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    let menuData: Awaited<ReturnType<typeof getMenuData>> | null = null;
    if (useStock) {
      menuData = await getMenuData();
    }

    // –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω—É–∂–Ω—ã –ª–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç—ã?
    const includeConcentrates = shouldIncludeConcentrates(message, conversationHistory);
    const menuContext = includeConcentrates 
      ? menuData?.contextTextWithConcentrates 
      : menuData?.contextText;

    console.log(`üì¶ Menu context: ${includeConcentrates ? 'with' : 'without'} concentrates`);

    // –°—Ç—Ä–æ–∏–º user context –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let enhancedUserContext = userContext;
    if (userProfile && !userContext) {
      enhancedUserContext = buildUserContextFromProfile(userProfile);
    }

    // –°—Ç—Ä–æ–∏–º system prompt (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô)
    const systemPrompt = buildSystemPrompt({
      menuContext,
      userContext: enhancedUserContext,
      useStock,
      language,
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    const recentHistory = conversationHistory.slice(-12);
    
    const messages: ChatMessage[] = [
      { role: 'system', content: systemPrompt },
      ...recentHistory,
      { role: 'user', content: message },
    ];

    const tokensEstimate = JSON.stringify(messages).length / 4;
    console.log(`üí¨ OpenAI request: ${messages.length} msgs, ~${Math.round(tokensEstimate)} tokens`);

    // 0) Semantic cache lookup (fast path) ‚Äî only for non-streaming responses
    if (!stream) {
      const semantic = await findSimilarCachedQuery(message, language);
      if (semantic && semantic.found && semantic.similarity && semantic.similarity >= 0.95 && semantic.response) {
        // Save minimal assistant message for history
        if (currentConversationId) {
          try {
            const assistantMessage: ConversationMessage = {
              role: 'assistant',
              content: semantic.response,
              timestamp: Date.now(),
            };
            await addMessageToConversationServer(currentConversationId, assistantMessage);
          } catch {}
        }
        return Response.json({
          reply: semantic.response,
          productCards: [],
          cached: true,
          conversationId: currentConversationId,
          userId: userProfile?.user_id,
        });
      }
    }

    // STREAMING RESPONSE (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    if (stream) {
      const streamResponse = await openai.chat.completions.create({
        model: 'gpt-4-turbo-preview',
        messages: messages as OpenAI.Chat.Completions.ChatCompletionMessageParam[],
        temperature: 0.8,
        max_tokens: 400, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 500 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        presence_penalty: 0.3,
        frequency_penalty: 0.3,
        stream: true, // STREAMING!
      });

      // –°–æ–∑–¥–∞–µ–º ReadableStream –¥–ª—è SSE
      const encoder = new TextEncoder();
      let fullReply = '';
      
      const readableStream = new ReadableStream({
        async start(controller) {
          try {
            for await (const chunk of streamResponse) {
              const content = chunk.choices[0]?.delta?.content || '';
              if (content) {
                fullReply += content;
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk –≤ —Ñ–æ—Ä–º–∞—Ç–µ SSE
                const data = JSON.stringify({ content, done: false });
                controller.enqueue(encoder.encode(`data: ${data}\n\n`));
              }
            }
            
            // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const processingStart = Date.now();
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
            let suggestedProducts: string[] = [];
            let productCards: ProductCard[] = [];
            
            if (useStock && menuData && menuData.rows.length > 0) {
              try {
                suggestedProducts = extractProductMentions(fullReply, menuData.rows);
                
                const mapped = suggestedProducts
                  .map(productName => {
                    const product = menuData.rows.find(r => r.Name === productName);
                    if (!product) return null;
                    
                    const card: ProductCard = {
                      name: product.Name || productName,
                      category: product.Category || '',
                      type: product.Type ?? undefined,
                      thc: product.THC ? String(product.THC) : undefined,
                      cbg: product.CBG ? String(product.CBG) : undefined,
                      price_1g: product.Price_1g ?? undefined,
                      price_5g: product.Price_5g ?? undefined,
                      price_20g: product.Price_20g ?? undefined,
                      isOur: product.Our ?? undefined,
                      effects: getStrainEffects(product.Type),
                      flavors: getStrainFlavors(product.Type),
                    };
                    return card;
                  })
                  .filter((card): card is ProductCard => card !== null);
                productCards = mapped;
              } catch (error) {
                console.error('Error extracting products:', error);
              }
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const userIntent = detectUserIntent(message, fullReply, conversationHistory, menuData?.rows || [], language);

            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å—á—ë—Ç —Å—É–º–º—ã ‚Äî –¥–æ–±–∞–≤–∏–º –µ–≥–æ —è–≤–Ω–æ –≤ –æ—Ç–≤–µ—Ç
            if (userIntent.type === 'order' && userIntent.breakdown) {
              const totalLabel = getTotalLabelByLanguage(language);
              if (!fullReply.includes(userIntent.breakdown)) {
                fullReply += `\n\n${totalLabel}: ${userIntent.breakdown}`;
              }
            }
            let notificationSent = false;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º stream)
            if (userIntent.shouldNotify && process.env.TELEGRAM_BOT_TOKEN) {
              // Fire and forget - –Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
              fetch(`${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3001'}/api/telegram/notify`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  type: userIntent.type,
                  message: message,
                  userId: body.userId || 'anonymous',
                  userContext: body.userContext ? JSON.parse(body.userContext) : undefined,
                  products: userIntent.products,
                  quantity: userIntent.quantity,
                  totalAmount: userIntent.totalAmount,
                  breakdown: userIntent.breakdown,
                  contactInfo: userIntent.contactInfo,
                  metadata: {
                    language,
                    timestamp: new Date().toISOString(),
                  },
                }),
              }).then(res => {
                if (res.ok) {
                  console.log(`üì§ Telegram notified (${userIntent.type})`);
                }
              }).catch(err => {
                console.error('‚ö†Ô∏è Telegram error:', err);
              });
              
              notificationSent = true;
            }
            
            const processingTime = Date.now() - processingStart;
            const totalTime = Date.now() - startTime;
            
            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ Supabase
            if (currentConversationId && fullReply) {
              try {
                const assistantMessage: ConversationMessage = {
                  role: 'assistant',
                  content: fullReply,
                  timestamp: Date.now(),
                  productCards: suggestedProducts,
                };
                
                await addMessageToConversationServer(currentConversationId, assistantMessage);
              } catch (error) {
                console.error('‚ö†Ô∏è Error saving assistant message:', error);
              }
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const finalData = JSON.stringify({
              done: true,
              suggestedProducts,
              productCards,
              notificationSent,
              conversationId: currentConversationId,
              userId: userProfile?.user_id,
              timing: {
                total: totalTime,
                processing: processingTime,
              }
            });
            
            controller.enqueue(encoder.encode(`data: ${finalData}\n\n`));
            controller.close();
            
            console.log(`‚úÖ Stream completed: ${totalTime}ms (processing: ${processingTime}ms)`);

            // Save to semantic cache (best-effort)
            try {
              await addToSemanticCache({
                query: message,
                response: fullReply,
                responseType: 'general',
                language,
              });
            } catch {}
            
          } catch (error) {
            console.error('‚ùå Stream error:', error);
            const errorData = JSON.stringify({ 
              error: 'Stream interrupted',
              done: true 
            });
            controller.enqueue(encoder.encode(`data: ${errorData}\n\n`));
            controller.close();
          }
        },
      });

      return new Response(readableStream, {
        headers: {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
        },
      });
    }

    // NON-STREAMING RESPONSE (fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: messages as OpenAI.Chat.Completions.ChatCompletionMessageParam[],
      temperature: 0.8,
      max_tokens: 400,
      presence_penalty: 0.3,
      frequency_penalty: 0.3,
    });

    let reply = completion.choices[0]?.message?.content || 'Sorry, could not generate response. Try rephrasing?';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è Telegram
    const userIntent = detectUserIntent(message, reply, conversationHistory, menuData?.rows || [], language);

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å—á—ë—Ç —Å—É–º–º—ã ‚Äî –¥–æ–±–∞–≤–∏–º –µ–≥–æ —è–≤–Ω–æ –≤ –æ—Ç–≤–µ—Ç
    if (userIntent.type === 'order' && userIntent.breakdown) {
      const totalLabel = getTotalLabelByLanguage(language);
      if (!reply.includes(userIntent.breakdown)) {
        reply = `${reply}\n\n${totalLabel}: ${userIntent.breakdown}`;
      }
    }
    let notificationSent = false;

    if (userIntent.shouldNotify && process.env.TELEGRAM_BOT_TOKEN) {
      try {
        const notificationResponse = await fetch(`${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3001'}/api/telegram/notify`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            type: userIntent.type,
            message: message,
            userId: body.userId || 'anonymous',
            userContext: body.userContext ? JSON.parse(body.userContext) : undefined,
            products: userIntent.products,
            quantity: userIntent.quantity,
            totalAmount: userIntent.totalAmount,
            breakdown: userIntent.breakdown,
            contactInfo: userIntent.contactInfo,
            metadata: {
              language,
              timestamp: new Date().toISOString(),
            },
          }),
        });

        if (notificationResponse.ok) {
          notificationSent = true;
          console.log(`üì§ Telegram notified (${userIntent.type})`);
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Telegram error:', error);
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º—è–Ω—É—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    let suggestedProducts: string[] = [];
    let productCards: ProductCard[] = [];
    if (useStock && menuData && menuData.rows.length > 0) {
      try {
        suggestedProducts = extractProductMentions(reply, menuData.rows);
        const mapped2 = suggestedProducts
          .map(productName => {
            const product = menuData.rows.find(r => r.Name === productName);
            if (!product) return null;
            const card: ProductCard = {
              name: product.Name || productName,
              category: product.Category || '',
              type: product.Type ?? undefined,
              thc: product.THC ? String(product.THC) : undefined,
              cbg: product.CBG ? String(product.CBG) : undefined,
              price_1g: product.Price_1g ?? undefined,
              price_5g: product.Price_5g ?? undefined,
              price_20g: product.Price_20g ?? undefined,
              isOur: product.Our ?? undefined,
              effects: getStrainEffects(product.Type),
              flavors: getStrainFlavors(product.Type),
            };
            return card;
          })
          .filter((card): card is ProductCard => card !== null);
        productCards = mapped2;
      } catch (error) {
        console.error('Error extracting products:', error);
      }
    }

    const totalTime = Date.now() - startTime;
    console.log(`‚úÖ Response: ${totalTime}ms, ${suggestedProducts.length} products, tokens: ${completion.usage?.total_tokens}`);

    // Persist to semantic cache (best-effort)
    try {
      await addToSemanticCache({
        query: message,
        response: reply,
        responseType: 'general',
        language,
      });
    } catch {}

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ Supabase
    if (currentConversationId && reply) {
      try {
        const assistantMessage: ConversationMessage = {
          role: 'assistant',
          content: reply,
          timestamp: Date.now(),
          productCards: suggestedProducts,
        };
        
        await addMessageToConversationServer(currentConversationId, assistantMessage);
      } catch (error) {
        console.error('‚ö†Ô∏è Error saving assistant message:', error);
      }
    }

    return Response.json({
      reply,
      suggestedProducts,
      productCards,
      notificationSent,
      conversationId: currentConversationId,
      userId: userProfile?.user_id,
      timing: {
        total: totalTime,
      }
    });

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`‚ùå Error after ${totalTime}ms:`, error);

    if (error instanceof OpenAI.APIError) {
      return Response.json(
        { 
          error: 'AI service error', 
          reply: 'Sorry, technical difficulties üîß Try in a minute or contact live budtender.',
          suggestedProducts: [],
        },
        { status: 500 }
      );
    }

    return Response.json(
      { 
        error: 'Internal server error',
        reply: 'Something went wrong üòî Our devs are on it. Try later!',
        suggestedProducts: [],
      },
      { status: 500 }
    );
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  const cacheAge = menuCache ? Math.floor((Date.now() - menuCache.timestamp) / 1000) : null;
  const cacheExpired = menuCache ? (Date.now() - menuCache.timestamp) >= MENU_CACHE_TTL : true;
  
  return Response.json({
    status: 'ok',
    service: 'OG Lab Agent (Optimized)',
    model: 'gpt-4-turbo-preview',
    features: ['streaming', 'smart-menu-filtering', 'optimized-prompt'],
    cache: {
      exists: !!menuCache,
      age_seconds: cacheAge,
      ttl_seconds: MENU_CACHE_TTL / 1000,
      expired: cacheExpired,
      items_count: menuCache?.rows.length || 0,
    },
  });
}

// HEAD endpoint –¥–ª—è prefetch –∫—ç—à–∞
export async function HEAD() {
  try {
    const menuData = await getMenuData();
    
    return new Response(null, {
      status: 200,
      headers: {
        'X-Cache-Status': menuCache ? 'hit' : 'miss',
        'X-Items-Count': String(menuData.rows.length),
        'X-Cache-Age': String(menuCache ? Math.floor((Date.now() - menuCache.timestamp) / 1000) : 0),
      },
    });
  } catch (error) {
    console.error('Error prefetching menu:', error);
    return new Response(null, { status: 500 });
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
interface UserIntent {
  shouldNotify: boolean;
  type: 'order' | 'wish' | 'feedback' | 'staff_question' | 'general';
  products?: string[];
  quantity?: string;
  totalAmount?: number;
  breakdown?: string;
  contactInfo?: {
    name?: string;
    phone?: string;
    address?: string;
    paymentMethod?: string;
  };
  confidence: number;
}

function detectUserIntent(
  userMessage: string, 
  agentReply: string, 
  conversationHistory: ChatMessage[],
  menuItems: MenuRow[],
  language: 'ru' | 'en' | 'th' | 'fr' | 'de' | 'he' | 'it' = 'en'
): UserIntent {
  const lowerMessage = userMessage.toLowerCase();
  const lowerReply = agentReply.toLowerCase();
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
  const orderKeywords = [
    '–∑–∞–∫–∞–∑', '–∫—É–ø–∏—Ç—å', '–∑–∞–±—Ä–æ–Ω', '–∑–∞–∫–∞–∂—É', '—Ö–æ—á—É –≤–∑—è—Ç—å', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–ø—Ä–∏–≤–µ–∑', '–¥–æ–≤–µ–∑',
    '–æ—Ñ–æ—Ä–º', '–±–µ—Ä—É', '–≤–æ–∑—å–º—É', '–∫—É–ø–ª—é', '–Ω—É–∂–Ω–æ', '–ø—Ä–∏–≤–µ–∑–∏—Ç–µ', '–¥–æ—Å—Ç–∞–≤—å—Ç–µ',
    '–¥–∞–≤–∞–π –µ–≥–æ', '–¥–∞–≤–∞–π –∏—Ö', '–∏–º—è –º–æ–µ', '–≤–æ—Ç—Å–∞–ø–ø', '–≤–∞—Ç—Å–∞–ø', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–æ—Ç–µ–ª—å', 'hotel',
    'room', '–Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã', '–æ–ø–ª–∞—Ç–∞', '–Ω–∞–ª–∏—á–Ω—ã–º–∏', '–Ω–∞–ª–∏—á–∫–∞', 'payment', 'cash',
    'order', 'buy', 'purchase', 'book', 'reserve', 'delivery', 'deliver', 'bring',
    'want to order', 'place order', 'need delivery', 'my name', 'whatsapp',
    '‡∏™‡∏±‡πà‡∏á', '‡∏ã‡∏∑‡πâ‡∏≠', '‡∏à‡∏≠‡∏á', '‡∏™‡πà‡∏á'
  ];
  
  const deliveryHints = [
    '–¥–∞–ª–µ–∫–æ', '—É—Å—Ç–∞–ª', '–Ω–µ –º–æ–≥—É –ø—Ä–∏–µ—Ö–∞—Ç—å', '–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞', '–¥–æ–∂–¥—å',
    '–º–æ–∂–Ω–æ –ø—Ä–∏–≤–µ–∑—Ç–∏', '–µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ',
    'far', 'tired', 'can\'t come', 'weather', 'rain', 'do you deliver',
    '‡πÑ‡∏Å‡∏•', '‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢', '‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°'
  ];
  
  const wishKeywords = [
    '–ø–æ—Å–æ–≤–µ—Ç', '—Ä–µ–∫–æ–º–µ–Ω–¥', '—Ö–æ—Ç–µ–ª –±—ã', '–Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç', '—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç',
    '–ø–æ–¥—Å–∫–∞–∂', '–ø–æ–º–æ–≥', '—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å', '—á—Ç–æ –ª—É—á—à–µ',
    'suggest', 'recommend', 'advice', 'what should', 'help me choose',
    '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏≠‡∏¢‡∏≤‡∏Å', '‡∏ä‡πà‡∏ß‡∏¢'
  ];
  
  const feedbackKeywords = [
    '—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫–ª–∞—Å—Å–Ω–æ', '—Å—É–ø–µ—Ä', '–æ—Ç–∑—ã–≤', '–±–ª–∞–≥–æ–¥–∞—Ä',
    '–∫—Ä—É—Ç–æ', '–∫–∞–π—Ñ', '–ø–æ–Ω—Ä–∞–≤', '—Ö–æ—Ä–æ—à',
    'thank', 'great', 'awesome', 'feedback', 'review', 'love', 'perfect',
    '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì', '‡∏î‡∏µ', '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'
  ];
  
  const staffQuestionKeywords = [
    '–∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç', '–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', '–º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏',
    '–∞–¥—Ä–µ—Å', '—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã', '–∫–æ–Ω—Ç–∞–∫—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–≤—è–∑–∞—Ç—å—Å—è',
    '–ø–µ—Ä–µ–¥–∞–π—Ç–µ', '—Å–∫–∞–∂–∏—Ç–µ', '–ø–µ—Ä–µ–¥–∞–π', '—Å–æ–æ–±—â–∏',
    'when open', 'where located', 'how to get', 'address', 'hours',
    'tell them', 'let them know', 'pass message',
    '‡πÄ‡∏õ‡∏¥‡∏î', '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', '‡πÄ‡∏ö‡∏≠‡∏£‡πå', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'
  ];

  const hasOrderIntent = orderKeywords.some(kw => lowerMessage.includes(kw));
  const hasDeliveryHint = deliveryHints.some(kw => lowerMessage.includes(kw));
  
  const hasPhoneNumber = /\d{8,15}/.test(userMessage);
  const hasContactInfo = hasPhoneNumber || 
                         lowerMessage.includes('–∏–º—è') || 
                         lowerMessage.includes('name') ||
                         lowerMessage.includes('hotel') ||
                         lowerMessage.includes('–æ—Ç–µ–ª—å');
  
  const lastFiveMessages = conversationHistory.slice(-5);
  const hasRecentProductMention = lastFiveMessages.some(msg => {
    return menuItems.some(item => 
      item.Name && msg.content.toLowerCase().includes(item.Name.toLowerCase())
    );
  });
  
  const isLikelyOrder = (hasOrderIntent || hasDeliveryHint || hasContactInfo) && 
                        (hasRecentProductMention || hasOrderIntent);
  
  if (isLikelyOrder) {
    const orderInfo = extractOrderInfo(conversationHistory, menuItems);
    
    let totalAmount: number | undefined;
    let breakdown: string | undefined;
    
    if (orderInfo.products.length > 0 && orderInfo.quantityNumber) {
      const orderTotal = calculateOrderTotal(
        orderInfo.products[0],
        orderInfo.quantityNumber,
        menuItems,
        language
      );
      
      if (orderTotal) {
        totalAmount = orderTotal.amount;
        breakdown = orderTotal.breakdown;
      }
    }
    
    const hasProduct = orderInfo.products.length > 0;
    const hasQuantity = !!(orderInfo.quantityNumber && orderInfo.quantityNumber > 0);
    const hasPhone = !!(orderInfo.contactInfo?.phone && orderInfo.contactInfo.phone.length >= 8);
    const hasAddress = !!(orderInfo.contactInfo?.address && orderInfo.contactInfo.address.length > 3);
    
    const hashCategories = ['FRESH FROZEN HASH', 'LIVE HASH ROSIN', 'DRY SIFT HASH', 'ICE BUBBLE HASH'];
    const firstProduct = menuItems.find(item => item.Name === orderInfo.products[0]);
    const isHash = !!(firstProduct && hashCategories.includes(firstProduct.Category || ''));
    const minQuantity = isHash ? 10 : 20;
    const meetsMinimum = orderInfo.quantityNumber ? orderInfo.quantityNumber >= minQuantity : false;
    
    const allDataCollected: boolean = hasProduct && hasQuantity && hasPhone && hasAddress && meetsMinimum;
    
    console.log('üõçÔ∏è Order validation:', {
      products: orderInfo.products,
      quantityNumber: orderInfo.quantityNumber,
      totalAmount,
      validation: { hasProduct, hasQuantity, hasPhone, hasAddress, meetsMinimum, allDataCollected }
    });
    
    return {
      shouldNotify: allDataCollected,
      type: 'order',
      products: orderInfo.products.length > 0 ? orderInfo.products : undefined,
      quantity: orderInfo.quantity,
      totalAmount,
      breakdown,
      contactInfo: orderInfo.contactInfo,
      confidence: allDataCollected ? 0.95 : 0.5,
    };
  }

  if (wishKeywords.some(kw => lowerMessage.includes(kw))) {
    const productMatches = agentReply.match(/\*\*(.*?)\*\*/g);
    const products = productMatches ? productMatches.map(m => m.replace(/\*\*/g, '')) : [];
    
    return {
      shouldNotify: true,
      type: 'wish',
      products: products.length > 0 ? products : undefined,
      confidence: 0.75,
    };
  }

  if (staffQuestionKeywords.some(kw => lowerMessage.includes(kw))) {
    const needsHuman = lowerReply.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª') || 
                       lowerReply.includes('–±–∞–¥—Ç–µ–Ω–¥–µ—Ä') ||
                       lowerReply.includes('—Å–≤—è–∑–∞—Ç—å—Å—è') ||
                       lowerReply.includes('–ø–æ–∑–≤–æ–Ω–∏—Ç—å') ||
                       lowerReply.includes('–ø–µ—Ä–µ–¥–∞–º') ||
                       lowerReply.includes('–º–µ–Ω–µ–¥–∂–µ—Ä');
    
    return {
      shouldNotify: needsHuman,
      type: 'staff_question',
      confidence: needsHuman ? 0.90 : 0.40,
    };
  }

  if (feedbackKeywords.some(kw => lowerMessage.includes(kw))) {
    return {
      shouldNotify: true,
      type: 'feedback',
      confidence: 0.70,
    };
  }

  return {
    shouldNotify: false,
    type: 'general',
    confidence: 0,
  };
}
