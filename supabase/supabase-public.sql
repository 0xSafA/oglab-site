-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.agent_events (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_profile_id uuid,
  conversation_id uuid,
  order_id uuid,
  event_type text NOT NULL,
  event_data jsonb,
  channel text,
  session_id text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_events_pkey PRIMARY KEY (id),
  CONSTRAINT agent_events_user_profile_id_fkey FOREIGN KEY (user_profile_id) REFERENCES public.user_profiles(id),
  CONSTRAINT agent_events_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id),
  CONSTRAINT agent_events_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id)
);
CREATE TABLE public.ai_events (
  id bigint NOT NULL DEFAULT nextval('ai_events_id_seq'::regclass),
  ts timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid,
  org_id uuid,
  prescription_id bigint,
  stage text NOT NULL,
  input jsonb,
  output jsonb,
  success boolean NOT NULL DEFAULT true,
  latency_ms integer,
  CONSTRAINT ai_events_pkey PRIMARY KEY (id)
);
CREATE TABLE public.audit_logs (
  id bigint NOT NULL DEFAULT nextval('audit_logs_id_seq'::regclass),
  ts timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid,
  org_id uuid,
  entity text NOT NULL,
  entity_id text NOT NULL,
  action text NOT NULL,
  diff jsonb,
  meta jsonb,
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.balances (
  balance_id uuid NOT NULL DEFAULT gen_random_uuid(),
  recipient_id uuid NOT NULL,
  recipient_type text NOT NULL CHECK (recipient_type = ANY (ARRAY['provider'::text, 'doctor'::text, 'store'::text, 'developer'::text, 'fund'::text])),
  current_balance_thb numeric DEFAULT 0.00,
  pending_balance_thb numeric DEFAULT 0.00,
  lifetime_earnings_thb numeric DEFAULT 0.00,
  last_updated timestamp with time zone DEFAULT now(),
  CONSTRAINT balances_pkey PRIMARY KEY (balance_id)
);
CREATE TABLE public.conversations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_profile_id uuid NOT NULL,
  channel text NOT NULL,
  language text DEFAULT 'en'::text,
  started_at timestamp with time zone DEFAULT now(),
  ended_at timestamp with time zone,
  last_message_at timestamp with time zone DEFAULT now(),
  messages jsonb DEFAULT '[]'::jsonb,
  summary text,
  message_count integer DEFAULT 0,
  user_satisfaction integer,
  feedback text,
  resulted_in_order boolean DEFAULT false,
  order_id uuid,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT conversations_pkey PRIMARY KEY (id),
  CONSTRAINT conversations_user_profile_id_fkey FOREIGN KEY (user_profile_id) REFERENCES public.user_profiles(id)
);
CREATE TABLE public.doctor_settings (
  user_id uuid NOT NULL,
  interval_between_visits integer NOT NULL DEFAULT 10 CHECK (interval_between_visits >= 5 AND interval_between_visits <= 240),
  consultation_hours jsonb NOT NULL DEFAULT jsonb_build_object('monday', jsonb_build_object('start', '09:00', 'end', '17:00', 'enabled', true), 'tuesday', jsonb_build_object('start', '09:00', 'end', '17:00', 'enabled', true), 'wednesday', jsonb_build_object('start', '09:00', 'end', '17:00', 'enabled', true), 'thursday', jsonb_build_object('start', '09:00', 'end', '17:00', 'enabled', true), 'friday', jsonb_build_object('start', '09:00', 'end', '17:00', 'enabled', true), 'saturday', jsonb_build_object('start', '09:00', 'end', '13:00', 'enabled', false), 'sunday', jsonb_build_object('start', '09:00', 'end', '13:00', 'enabled', false)),
  auto_pause_at_threshold boolean NOT NULL DEFAULT true,
  grace_overrides_per_day integer NOT NULL DEFAULT 5 CHECK (grace_overrides_per_day >= 0 AND grace_overrides_per_day <= 50),
  prescriber_type text NOT NULL DEFAULT 'Traditional Thai Medicine Doctor (TTM)'::text,
  scope_preset text NOT NULL DEFAULT 'Custom Scope'::text,
  allowed_categories ARRAY NOT NULL DEFAULT ARRAY['Traditional Remedies'::text, 'Herbal Products & Supplements'::text, 'Cannabis (Medical)'::text],
  disallow_controlled_substances boolean NOT NULL DEFAULT false,
  allowed_forms ARRAY NOT NULL DEFAULT ARRAY['PT-33'::text],
  create_visit_on_missing_patient boolean NOT NULL DEFAULT true,
  ai_assistant_enabled boolean NOT NULL DEFAULT false,
  ai_run_in_background boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT doctor_settings_pkey PRIMARY KEY (user_id),
  CONSTRAINT doctor_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.dynamic_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  event_text text DEFAULT 'Next party is coming soon! Stay tuned!'::text,
  offer_text text DEFAULT 'Special offer available now!'::text,
  offer_hide boolean DEFAULT false,
  tier0_label text DEFAULT '1PC'::text,
  tier1_label text DEFAULT '1G'::text,
  tier2_label text DEFAULT '5G+'::text,
  tier3_label text DEFAULT '20G+'::text,
  legend_hybrid text DEFAULT 'Hybrid'::text,
  legend_sativa text DEFAULT 'Sativa'::text,
  legend_indica text DEFAULT 'Indica'::text,
  feature_label text DEFAULT 'Farm-grown'::text,
  tip_label text DEFAULT 'Batches from 5g'::text,
  offer_enable_particles boolean DEFAULT true,
  offer_enable_cosmic_glow boolean DEFAULT true,
  offer_enable_floating boolean DEFAULT true,
  offer_enable_pulse boolean DEFAULT true,
  offer_enable_inner_light boolean DEFAULT true,
  CONSTRAINT dynamic_settings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ehr_records (
  patient_id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_by uuid NOT NULL DEFAULT auth.uid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  org_id uuid,
  full_name text NOT NULL,
  date_of_birth date NOT NULL,
  age_years integer CHECK (age_years >= 0 AND age_years <= 150),
  sex USER-DEFINED NOT NULL,
  nationality text NOT NULL DEFAULT 'Unknown'::text,
  id_document_type USER-DEFINED NOT NULL DEFAULT 'passport'::id_document_type,
  id_document_number text NOT NULL,
  phone text,
  email USER-DEFINED CHECK (email IS NULL OR email = ''::citext OR email ~* '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$'::citext),
  height_cm integer CHECK (height_cm >= 50 AND height_cm <= 300),
  weight_kg numeric CHECK (weight_kg >= 10::numeric AND weight_kg <= 500::numeric),
  bmi numeric CHECK (bmi >= 10::numeric AND bmi <= 100::numeric),
  allergies jsonb DEFAULT '[]'::jsonb,
  chronic_conditions jsonb DEFAULT '[]'::jsonb,
  surgeries_and_serious_illness jsonb DEFAULT '[]'::jsonb,
  current_medications jsonb DEFAULT '[]'::jsonb,
  family_history jsonb DEFAULT '[]'::jsonb,
  smoking_status USER-DEFINED,
  smoking_packs_per_day numeric CHECK (smoking_packs_per_day >= 0::numeric AND smoking_packs_per_day <= 10::numeric),
  smoking_quit_date date,
  alcohol_frequency USER-DEFINED,
  alcohol_drinks_per_week integer CHECK (alcohol_drinks_per_week >= 0 AND alcohol_drinks_per_week <= 100),
  other_substances jsonb DEFAULT '[]'::jsonb,
  bp_systolic integer CHECK (bp_systolic >= 50 AND bp_systolic <= 300),
  bp_diastolic integer CHECK (bp_diastolic >= 30 AND bp_diastolic <= 200),
  hr_bpm integer CHECK (hr_bpm >= 30 AND hr_bpm <= 300),
  consent_telemedicine boolean NOT NULL DEFAULT false,
  consent_data_processing boolean NOT NULL DEFAULT false,
  consent_share_with_store boolean DEFAULT false,
  notes text,
  deleted_at timestamp with time zone,
  source_type text DEFAULT 'manual'::text CHECK (source_type = ANY (ARRAY['manual'::text, 'prescription'::text, 'patient_registration'::text, 'patient_request'::text])),
  source_prescription_id bigint,
  CONSTRAINT ehr_records_pkey PRIMARY KEY (patient_id),
  CONSTRAINT ehr_records_created_by_fk FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT ehr_records_org_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT ehr_records_source_prescription_id_fkey FOREIGN KEY (source_prescription_id) REFERENCES public.prescriptions(prescription_id)
);
CREATE TABLE public.ledger_entries (
  entry_id uuid NOT NULL DEFAULT gen_random_uuid(),
  prescription_id bigint NOT NULL,
  revenue_split_id uuid,
  entry_type text NOT NULL CHECK (entry_type = ANY (ARRAY['store'::text, 'provider'::text, 'doctor'::text, 'developer'::text, 'fund'::text, 'parent_provider'::text])),
  recipient_id uuid NOT NULL,
  recipient_type text NOT NULL DEFAULT 'user'::text CHECK (recipient_type = ANY (ARRAY['user'::text, 'store'::text, 'system'::text])),
  amount_thb numeric NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'paid'::text, 'disputed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  processed_at timestamp with time zone,
  audit_trail jsonb,
  CONSTRAINT ledger_entries_pkey PRIMARY KEY (entry_id),
  CONSTRAINT ledger_entries_prescription_id_fkey FOREIGN KEY (prescription_id) REFERENCES public.prescriptions(prescription_id),
  CONSTRAINT ledger_entries_revenue_split_id_fkey FOREIGN KEY (revenue_split_id) REFERENCES public.revenue_splits(split_id)
);
CREATE TABLE public.menu_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  category text NOT NULL,
  name text NOT NULL,
  type text CHECK (type = ANY (ARRAY['hybrid'::text, 'sativa'::text, 'indica'::text])),
  thc numeric,
  cbg numeric,
  price_1pc numeric,
  price_1g numeric,
  price_5g numeric,
  price_20g numeric,
  our boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  updated_by uuid,
  CONSTRAINT menu_items_pkey PRIMARY KEY (id),
  CONSTRAINT menu_items_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.menu_layout (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  column1 ARRAY DEFAULT '{}'::text[],
  column2 ARRAY DEFAULT '{}'::text[],
  column3 ARRAY DEFAULT '{}'::text[],
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  hidden ARRAY NOT NULL DEFAULT '{}'::text[],
  CONSTRAINT menu_layout_pkey PRIMARY KEY (id)
);
CREATE TABLE public.orders (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  order_number text NOT NULL UNIQUE,
  user_profile_id uuid,
  conversation_id uuid,
  assigned_to uuid,
  status text NOT NULL DEFAULT 'pending'::text,
  status_history jsonb DEFAULT '[]'::jsonb,
  items jsonb NOT NULL,
  subtotal numeric NOT NULL,
  delivery_fee numeric DEFAULT 0,
  discount numeric DEFAULT 0,
  total_amount numeric NOT NULL,
  currency text DEFAULT 'THB'::text,
  contact_info jsonb NOT NULL,
  delivery_address text,
  delivery_notes text,
  payment_method text NOT NULL,
  payment_status text DEFAULT 'pending'::text,
  created_at timestamp with time zone DEFAULT now(),
  confirmed_at timestamp with time zone,
  estimated_delivery timestamp with time zone,
  actual_delivery timestamp with time zone,
  completed_at timestamp with time zone,
  cancelled_at timestamp with time zone,
  order_source text DEFAULT 'web'::text,
  staff_notes text,
  cancellation_reason text,
  rating integer,
  review text,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT orders_user_profile_id_fkey FOREIGN KEY (user_profile_id) REFERENCES public.user_profiles(id),
  CONSTRAINT orders_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id)
);
CREATE TABLE public.organizations (
  org_id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  country text,
  locale text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  service_provider_id uuid,
  referral_code_used character varying,
  revenue_split_id uuid,
  onboarded_at timestamp with time zone,
  CONSTRAINT organizations_pkey PRIMARY KEY (org_id),
  CONSTRAINT organizations_revenue_split_fk FOREIGN KEY (revenue_split_id) REFERENCES public.revenue_splits(split_id),
  CONSTRAINT organizations_service_provider_fk FOREIGN KEY (service_provider_id) REFERENCES public.service_providers(provider_id)
);
CREATE TABLE public.payouts (
  payout_id uuid NOT NULL DEFAULT gen_random_uuid(),
  recipient_id uuid NOT NULL,
  recipient_type text NOT NULL CHECK (recipient_type = ANY (ARRAY['provider'::text, 'doctor'::text, 'store'::text])),
  amount_thb numeric NOT NULL,
  payout_method text NOT NULL CHECK (payout_method = ANY (ARRAY['manual'::text, 'stripe'::text, 'promptpay'::text, 'bank'::text])),
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  external_transaction_id text,
  requested_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  metadata jsonb,
  CONSTRAINT payouts_pkey PRIMARY KEY (payout_id)
);
CREATE TABLE public.post_share_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  post_share_id uuid NOT NULL,
  fetched_at timestamp with time zone NOT NULL DEFAULT now(),
  impressions bigint,
  likes bigint,
  comments bigint,
  shares bigint,
  saves bigint,
  CONSTRAINT post_share_metrics_pkey PRIMARY KEY (id),
  CONSTRAINT post_share_metrics_post_share_id_fkey FOREIGN KEY (post_share_id) REFERENCES public.post_shares(id)
);
CREATE TABLE public.post_shares (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  post_translation_id uuid NOT NULL,
  platform USER-DEFINED NOT NULL,
  locale text NOT NULL,
  title_override text,
  content_md text,
  media_refs jsonb,
  utm_source text,
  utm_campaign text,
  status USER-DEFINED NOT NULL DEFAULT 'draft'::share_status,
  scheduled_at timestamp with time zone,
  published_at timestamp with time zone,
  external_post_id text,
  external_url text,
  moderation_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT post_shares_pkey PRIMARY KEY (id),
  CONSTRAINT post_shares_post_translation_id_fkey FOREIGN KEY (post_translation_id) REFERENCES public.post_translations(id)
);
CREATE TABLE public.post_translations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  post_id uuid NOT NULL,
  locale text NOT NULL,
  title text NOT NULL,
  slug text NOT NULL,
  excerpt text,
  body_md text,
  seo_title text,
  seo_description text,
  og_image_url text,
  translation_source text CHECK (translation_source = ANY (ARRAY['ai'::text, 'human'::text])),
  review_status text NOT NULL DEFAULT 'needs_review'::text CHECK (review_status = ANY (ARRAY['needs_review'::text, 'approved'::text])),
  last_reviewed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT post_translations_pkey PRIMARY KEY (id),
  CONSTRAINT post_translations_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id)
);
CREATE TABLE public.posts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  status text NOT NULL DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'published'::text])),
  author_id uuid,
  cover_image_url text,
  published_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT posts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.prescriptions (
  prescription_id bigint NOT NULL DEFAULT nextval('prescriptions_prescription_id_seq'::regclass),
  prescription_date date NOT NULL,
  full_name text NOT NULL,
  age integer NOT NULL CHECK (age >= 0 AND age <= 120),
  id_passport text,
  nationality text,
  symptoms text,
  diagnosis text,
  indication text,
  product text,
  dosage text,
  frequency text,
  duration text,
  total_quantity text,
  prescriber_name text NOT NULL,
  prescriber_license_number text,
  prescriber_address text,
  prescriber_phone text,
  prescriber_email USER-DEFINED CHECK (prescriber_email IS NULL OR prescriber_email = ''::citext OR prescriber_email ~* '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$'::citext),
  prescriber_signature text,
  created_by uuid DEFAULT auth.uid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  org_id uuid,
  doctor_user_id uuid,
  status USER-DEFINED NOT NULL DEFAULT 'draft'::rx_status,
  deleted_at timestamp with time zone,
  created_by_role text DEFAULT 'store'::text CHECK (created_by_role = ANY (ARRAY['store'::text, 'patient'::text, 'doctor'::text])),
  patient_user_id uuid,
  ehr_patient_id uuid,
  staff_id uuid,
  CONSTRAINT prescriptions_pkey PRIMARY KEY (prescription_id),
  CONSTRAINT prescriptions_doctor_user_fk FOREIGN KEY (doctor_user_id) REFERENCES auth.users(id),
  CONSTRAINT prescriptions_org_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT prescriptions_patient_user_id_fkey FOREIGN KEY (patient_user_id) REFERENCES auth.users(id),
  CONSTRAINT prescriptions_ehr_patient_id_fkey FOREIGN KEY (ehr_patient_id) REFERENCES public.ehr_records(patient_id),
  CONSTRAINT prescriptions_staff_fk FOREIGN KEY (staff_id) REFERENCES public.staff_members(staff_id)
);
CREATE TABLE public.print_jobs (
  job_id bigint NOT NULL DEFAULT nextval('print_jobs_job_id_seq'::regclass),
  org_id uuid,
  prescription_id bigint,
  user_id uuid,
  target text,
  payload_kind text,
  status USER-DEFINED NOT NULL DEFAULT 'queued'::print_status,
  attempts integer NOT NULL DEFAULT 0,
  error text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  sent_at timestamp with time zone,
  finished_at timestamp with time zone,
  deleted_at timestamp with time zone,
  print_type text DEFAULT 'direct'::text CHECK (print_type = ANY (ARRAY['direct'::text, 'pdf_download'::text])),
  CONSTRAINT print_jobs_pkey PRIMARY KEY (job_id),
  CONSTRAINT pj_org_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT pj_rx_fk FOREIGN KEY (prescription_id) REFERENCES public.prescriptions(prescription_id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text,
  full_name text,
  role text NOT NULL DEFAULT 'store'::text CHECK (role = ANY (ARRAY['store'::text, 'doctor'::text, 'admin'::text, 'provider'::text, 'patient'::text, 'weedmenu'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  org_id uuid,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  license_number text,
  address text,
  phone text,
  ai_assistant_enabled boolean DEFAULT false,
  store_name text,
  supplier_name text DEFAULT 'GACP Licensed Cannabis Farm'::text,
  supplier_license text DEFAULT 'GACP-001'::text,
  gacp_certified boolean DEFAULT true,
  license_file_url text,
  provider_id uuid,
  referral_code_used text,
  referred_at timestamp with time zone,
  patient_info jsonb,
  age integer CHECK (age >= 0 AND age <= 150),
  date_of_birth date,
  id_passport text,
  nationality text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id),
  CONSTRAINT profiles_org_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT profiles_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.service_providers(provider_id)
);
CREATE TABLE public.public_settings (
  key text NOT NULL,
  value jsonb NOT NULL DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid,
  CONSTRAINT public_settings_pkey PRIMARY KEY (key)
);
CREATE TABLE public.referral_codes (
  code_id uuid NOT NULL DEFAULT gen_random_uuid(),
  provider_id uuid NOT NULL,
  code character varying NOT NULL UNIQUE,
  usage_count integer DEFAULT 0,
  is_active boolean DEFAULT true,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT referral_codes_pkey PRIMARY KEY (code_id),
  CONSTRAINT referral_codes_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.service_providers(provider_id)
);
CREATE TABLE public.reports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  report_type text NOT NULL CHECK (report_type = ANY (ARRAY['form27'::text, 'form28'::text, 'billing'::text])),
  period_month integer NOT NULL CHECK (period_month >= 1 AND period_month <= 12),
  period_year integer NOT NULL CHECK (period_year >= 2020 AND period_year <= 2030),
  store_id uuid NOT NULL,
  store_name text NOT NULL,
  license_number text,
  report_data jsonb NOT NULL,
  gacp_balance jsonb,
  generated_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  data_hash text NOT NULL,
  created_by uuid,
  updated_by uuid,
  manual_entries jsonb DEFAULT '[]'::jsonb,
  CONSTRAINT reports_pkey PRIMARY KEY (id),
  CONSTRAINT reports_store_id_fkey FOREIGN KEY (store_id) REFERENCES public.profiles(id),
  CONSTRAINT reports_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id),
  CONSTRAINT reports_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.revenue_splits (
  split_id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  store_amount_thb numeric NOT NULL DEFAULT 100.00,
  provider_amount_thb numeric NOT NULL DEFAULT 60.00,
  doctor_amount_thb numeric NOT NULL DEFAULT 30.00,
  developer_amount_thb numeric NOT NULL DEFAULT 40.00,
  fund_amount_thb numeric NOT NULL DEFAULT 20.00,
  total_amount_thb numeric NOT NULL DEFAULT 250.00,
  is_default boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  stripe_fee_thb numeric NOT NULL DEFAULT 10.00,
  store_amount_satang integer DEFAULT 0,
  provider_amount_satang integer DEFAULT 0,
  doctor_amount_satang integer DEFAULT 0,
  developer_amount_satang integer DEFAULT 0,
  fund_amount_satang integer DEFAULT 0,
  stripe_fee_satang integer DEFAULT 0,
  total_amount_satang integer DEFAULT 0,
  grow_fund_satang integer DEFAULT 0,
  CONSTRAINT revenue_splits_pkey PRIMARY KEY (split_id)
);
CREATE TABLE public.service_providers (
  provider_id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  parent_provider_id uuid,
  company_name text,
  payout_method jsonb,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'suspended'::text, 'pending'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp with time zone,
  CONSTRAINT service_providers_pkey PRIMARY KEY (provider_id),
  CONSTRAINT service_providers_parent_provider_id_fkey FOREIGN KEY (parent_provider_id) REFERENCES public.service_providers(provider_id),
  CONSTRAINT service_providers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.staff_members (
  staff_id uuid NOT NULL DEFAULT gen_random_uuid(),
  org_id uuid NOT NULL,
  name character varying NOT NULL,
  pin_code character NOT NULL CHECK (pin_code ~ '^[0-9]{4}$'::text),
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  CONSTRAINT staff_members_pkey PRIMARY KEY (staff_id),
  CONSTRAINT staff_members_store_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT staff_members_created_by_fk FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.staff_sessions (
  session_id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  user_id uuid NOT NULL,
  org_id uuid NOT NULL,
  started_at timestamp with time zone NOT NULL DEFAULT now(),
  last_activity timestamp with time zone NOT NULL DEFAULT now(),
  ended_at timestamp with time zone,
  is_active boolean NOT NULL DEFAULT true,
  CONSTRAINT staff_sessions_pkey PRIMARY KEY (session_id),
  CONSTRAINT staff_sessions_staff_fk FOREIGN KEY (staff_id) REFERENCES public.staff_members(staff_id),
  CONSTRAINT staff_sessions_user_fk FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT staff_sessions_store_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.store_locations (
  location_id uuid NOT NULL DEFAULT gen_random_uuid(),
  store_user_id uuid NOT NULL,
  slug USER-DEFINED UNIQUE,
  name text NOT NULL,
  about text,
  accessibility_notes text,
  logo_url text,
  gallery jsonb NOT NULL DEFAULT '[]'::jsonb,
  links jsonb NOT NULL DEFAULT '{}'::jsonb,
  lat numeric,
  lng numeric,
  address text,
  open_hours jsonb,
  is_public boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by uuid,
  org_id uuid,
  latitude numeric,
  longitude numeric,
  published boolean DEFAULT false,
  deleted_at timestamp with time zone,
  display_name text,
  description_short text,
  description_full text,
  cover_url text,
  website_url text,
  facebook_url text,
  instagram_url text,
  line_url text,
  tiktok_url text,
  google_maps_url text,
  province text,
  district text,
  tags ARRAY,
  business_hours jsonb DEFAULT '{}'::jsonb,
  phone_display text,
  is_featured boolean DEFAULT false,
  seo_title text,
  seo_description text,
  partner_since date,
  rating_average numeric,
  rating_count integer DEFAULT 0,
  whatsapp_url text,
  CONSTRAINT store_locations_pkey PRIMARY KEY (location_id),
  CONSTRAINT store_locations_store_user_id_fkey FOREIGN KEY (store_user_id) REFERENCES public.profiles(id),
  CONSTRAINT store_locations_org_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id)
);
CREATE TABLE public.user_profiles (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id text NOT NULL UNIQUE,
  session_id text,
  telegram_user_id bigint UNIQUE,
  telegram_username text,
  created_at timestamp with time zone DEFAULT now(),
  first_visit timestamp with time zone DEFAULT now(),
  last_visit timestamp with time zone DEFAULT now(),
  total_conversations integer DEFAULT 0,
  total_messages integer DEFAULT 0,
  total_orders integer DEFAULT 0,
  total_spent numeric DEFAULT 0,
  preferences jsonb DEFAULT '{}'::jsonb,
  loyalty_points integer DEFAULT 0,
  referral_code text UNIQUE,
  referred_by uuid,
  notes text,
  tags ARRAY,
  is_active boolean DEFAULT true,
  is_blocked boolean DEFAULT false,
  blocked_reason text,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_profiles_referred_by_fkey FOREIGN KEY (referred_by) REFERENCES public.user_profiles(id)
);
CREATE TABLE public.verification_tokens (
  token_id uuid NOT NULL DEFAULT gen_random_uuid(),
  token text NOT NULL,
  prescription_id bigint NOT NULL,
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '1 year'::interval),
  revoked boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  used_at timestamp with time zone,
  last_access_at timestamp with time zone,
  created_by uuid,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  CONSTRAINT verification_tokens_pkey PRIMARY KEY (token_id),
  CONSTRAINT verification_tokens_rx_fk FOREIGN KEY (prescription_id) REFERENCES public.prescriptions(prescription_id)
);
CREATE TABLE public.video_consultations (
  consultation_id uuid NOT NULL DEFAULT gen_random_uuid(),
  prescription_id bigint,
  doctor_user_id uuid NOT NULL,
  org_id uuid NOT NULL,
  daily_meeting_id text NOT NULL,
  daily_meeting_url text NOT NULL,
  initiated_at timestamp with time zone NOT NULL DEFAULT now(),
  joined_at timestamp with time zone,
  ended_at timestamp with time zone,
  duration_minutes integer,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'pending'::text, 'active'::text, 'completed'::text, 'cancelled'::text, 'failed'::text])),
  failure_reason text,
  recording_enabled boolean DEFAULT false,
  recording_url text,
  session_metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  store_user_id uuid NOT NULL,
  patient_user_id uuid,
  ehr_patient_id uuid,
  scheduled_at timestamp with time zone,
  CONSTRAINT video_consultations_pkey PRIMARY KEY (consultation_id),
  CONSTRAINT video_consultations_doctor_user_id_fkey FOREIGN KEY (doctor_user_id) REFERENCES auth.users(id),
  CONSTRAINT video_consultations_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT video_consultations_prescription_id_fkey FOREIGN KEY (prescription_id) REFERENCES public.prescriptions(prescription_id),
  CONSTRAINT video_consultations_store_user_id_fkey FOREIGN KEY (store_user_id) REFERENCES auth.users(id),
  CONSTRAINT video_consultations_patient_user_id_fkey FOREIGN KEY (patient_user_id) REFERENCES auth.users(id),
  CONSTRAINT video_consultations_ehr_patient_id_fkey FOREIGN KEY (ehr_patient_id) REFERENCES public.ehr_records(patient_id),
  CONSTRAINT video_consultations_doctor_user_fk FOREIGN KEY (doctor_user_id) REFERENCES public.profiles(id),
  CONSTRAINT video_consultations_patient_user_fk FOREIGN KEY (patient_user_id) REFERENCES public.profiles(id),
  CONSTRAINT video_consultations_store_user_fk FOREIGN KEY (store_user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.video_sessions (
  session_id uuid NOT NULL DEFAULT gen_random_uuid(),
  org_id uuid,
  prescription_id bigint,
  initiator_id uuid NOT NULL,
  doctor_user_id uuid,
  provider text NOT NULL,
  room_name text,
  status USER-DEFINED NOT NULL DEFAULT 'initiated'::video_status,
  started_at timestamp with time zone,
  ended_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  CONSTRAINT video_sessions_pkey PRIMARY KEY (session_id),
  CONSTRAINT vs_doc_fk FOREIGN KEY (doctor_user_id) REFERENCES auth.users(id),
  CONSTRAINT vs_org_fk FOREIGN KEY (org_id) REFERENCES public.organizations(org_id),
  CONSTRAINT vs_rx_fk FOREIGN KEY (prescription_id) REFERENCES public.prescriptions(prescription_id)
);